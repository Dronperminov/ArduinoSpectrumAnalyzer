#include "Arduino.h"
#include <OneDAC.h>


//#define LOOP_TIME

// полная длина входных значений
#define N_WAVE  4096
// значение двоичного логарифма от N_WAVE
#define LOG2_N_WAVE 12

// частота выборок, определённая экспериментальным путём
#define SAMPLE_FREQ 47620

// размер одного буфера
#define BUFFER_SIZE 4096
// кол-во буферов для DMA
#define BUFFER_COUNT 4 

#define DATA_SIZE 2048

// накладывать ли окно на входные данные перед преобразованием Фурье
#define APPLY_WINDOW

// основане логарифма выходной шкалы частот спектроанализатора
// OUTPUT_LOG_BASE = (N_WAVE / 2) ^ (1 / N_OUTPUT), где N_OUTPUT - кол-во выходных полос
// для N_OUTPUT = 116, OUTPUT_LOG_BASE = 1.05 // 0.0179
// для N_OUTPUT = 64, OUTPUT_LOG_BASE = 1.105 // 0.021
// для N_OUTPUT = 40, OUTPUT_LOG_BASE = 1.19 // 0.019
// для N_OUTPUT = 11, OUTPUT_LOG_BASE = 2 // 0.0
// для N_OUTPUT = 8, OUTPUT_LOG_BASE = 3 // 0.40
// для N_OUTPUT = 6, OUTPUT_LOG_BASE = 5 
// для N_OUTPUT = 3, OUTPUT_LOG_BASE = 16
#define OUTPUT_LOG_BASE 1.19

// основание логарифма в представлении с фиксированной точкой
#define OUTPUT_LOG_BASE_FIX ((int16_t) ((int32_t) (INT16_MAX + 1) * (1.0 - 1.0 / OUTPUT_LOG_BASE)))

 // кол-во пропущенных циклов при калибровке
#define CALIBRATION_DUMMY_LOOPS 30
 // кол-во используемых циклов в вычислении среднего  при калибровке
#define CALIBRATION_WORK_LOOPS 30

// чувствительность к перегрузке по уровню
//#define OVERLOAD_TOLERANCE 200 
 // чувствительность к перегрузке по кол-ву выборок
#define OVERLOAD_DETECTION_THRESHOLD 5
// минимальное кол-во уровней, при котором включается алгоритм обнаружения перегрузки [1; NUM_LEVEL_COUNTERS]
#define MIN_OVERLOAD_DETECTION_LEVEL 128

#define NUM_LEVEL_COUNTERS 256

#if (UINT16_MAX + 1) % NUM_LEVEL_COUNTERS != 0
#  error 65536 должно нацело делиться на NUM_LEVEL_COUNTERS 
#endif

#define OVERLOAD_LED 13

// magic - don't work without it
#if 0
;
#endif


#define DAC_FREQ (VARIANT_MCK / 8)

#define DAC_BUFFER_SIZE 4096
#define DAC_MIN_BUFFER_SIZE 16

#define DAC_VALUE_MIN 0
#define DAC_VALUE_MAX 4095

#define DAC_MIN_RATIO 7
#define DAC_MAX_RATIO 1024

#define CMD_NONE 0
#define CMD_NOOP 1
#define CMD_SIN 2
#define CMD_SQUARE 3
#define CMD_TRIANGLE 4
#define CMD_SAW 5
#define CMD_STOP 6
#define CMD_UNKNOWN (-1)

uint16_t dac_buffer[DAC_BUFFER_SIZE];

uint32_t dac_buffer_data_size;

volatile int i_buf_index, o_buf_index; // индексы буферов

int16_t buffer[BUFFER_COUNT][BUFFER_SIZE]; // буфер для внутренней памяти

int16_t dc_level; // уровень постоянной составляющей

int16_t im[N_WAVE]; // массив im

typedef struct {
  int16_t band_count;
  int16_t level;
} band_data_t;

bool calculate_dac_buffer(uint freq, uint& dac_ratio, uint& buffer_size) {
  for (uint ratio = DAC_MIN_RATIO; ratio < DAC_MAX_RATIO; ratio++) {
    uint sample_freq = DAC_FREQ / ratio;
    uint buf_size = sample_freq / freq + (sample_freq % freq < (freq / 2) ? 0 : 1);
    
    if (buf_size < DAC_MIN_BUFFER_SIZE) {
      return false;
    }
    
    if (buf_size <= DAC_BUFFER_SIZE) {
      dac_ratio = ratio;
      buffer_size = buf_size;
      
      return true;
    }
  }
  
  return false;
}

// процедура заполнения массива значениями для формирования прямоугольнообразного сигнала
void fill_dac_buffer_square(uint16_t* buffer, uint buffer_size) {  
  for (int i = 0; i < buffer_size / 2; i++) {
    uint16_t value = DAC_VALUE_MAX;
    
    buffer[i] = value;
  }
  
  for (int i = buffer_size / 2; i < buffer_size; i++) {
    uint16_t value = DAC_VALUE_MIN;
    
    buffer[i] = value;
  }  
}

void fill_dac_buffer_sin(uint16_t* buffer, uint buffer_size) { 
  int16_t offset = (DAC_VALUE_MAX - DAC_VALUE_MIN + 1) / 2;
  
  for (int i = 0; i < buffer_size; i++) {    
    int16_t value = (int16_t) (round(sin(2 * M_PI * (float)i / buffer_size) * offset) + offset);
    
    if (value > DAC_VALUE_MAX) {
      value = DAC_VALUE_MAX;
    }
    
    buffer[i] = value;
  } 
}

void fill_dac_buffer_saw(uint16_t* buffer, uint buffer_size) { 
  for (int i = 0; i < buffer_size; i++) {
    uint16_t value = map(i, 0, buffer_size, DAC_VALUE_MIN, DAC_VALUE_MAX);
    
    buffer[i] = value;
  }
}

// процедура заполнения массива значениями для формирования пилообразного сигнала
void fill_dac_buffer_triangle(uint16_t* buffer, uint buffer_size) { 
  for (int i = 0; i < buffer_size / 2; i++) {
    uint16_t value = map(i, 0, buffer_size / 2, DAC_VALUE_MIN, DAC_VALUE_MAX);
    
    buffer[i] = value;
  }
 
  for (int i = buffer_size / 2; i < buffer_size; i++) {
    uint16_t value = map(i, buffer_size, buffer_size / 2, DAC_VALUE_MIN, DAC_VALUE_MAX);
    
    buffer[i] = value;
  }   
}

void fill_dac_buffer(int cmd, uint16_t* buffer, uint buffer_size) {
  switch (cmd) {
    case CMD_SIN:
      fill_dac_buffer_sin(buffer, buffer_size);
      break;
    
    case CMD_TRIANGLE:
      fill_dac_buffer_triangle(buffer, buffer_size);
      break;
      
    case CMD_SQUARE:
      fill_dac_buffer_square(buffer, buffer_size);
      break;
      
    case CMD_SAW:
      fill_dac_buffer_saw(buffer, buffer_size);
      break;
  }
}

void on_dac_transmit_end(void *) {
  OneDAC.queueBuffer(dac_buffer, dac_buffer_data_size);
}

void start_dac(uint dac_ratio, uint32_t buffer_size) {
  dac_buffer_data_size = buffer_size;
  
  OneDAC.begin(dac_ratio * (VARIANT_MCK / DAC_FREQ));
  
  OneDAC.setOnTransmitEnd_CB(on_dac_transmit_end, NULL);
  
  OneDAC.queueBuffer(dac_buffer, dac_buffer_data_size);
  OneDAC.queueBuffer(dac_buffer, dac_buffer_data_size);
}

void stop_dac() {
  OneDAC.end();
}

int read_command(uint &freq) {
  if (!Serial.available()) {
    return CMD_NONE;
  }
  
  char buf[128];
  
  int n = Serial.readBytesUntil('\n', buf, sizeof(buf) - 1);
  
  buf[n] = '\0';
  
  if (strcmp(buf, "") == 0) {
    return CMD_NONE;
  }
  
  char cmd[128];
  
  sscanf(buf, "%s %d", &cmd, &freq);  
  
  if (strcmp(cmd, "sin") == 0) {
    return CMD_SIN;
  } 
  else if (strcmp(cmd, "square") == 0) {
    return CMD_SQUARE;
  }
  else if (strcmp(cmd, "triangle") == 0) {
    return CMD_TRIANGLE;
  }
  else if (strcmp(cmd, "saw") == 0) {
    return CMD_SAW;
  }
  else if (strcmp(cmd, "stop") == 0) {
    return CMD_STOP;
  }
  else if (strcmp(cmd, "noop") == 0) {
    return CMD_NOOP;
  }
  else {
    return CMD_UNKNOWN;
  }
}

void process_command() {
  uint freq;
  uint dac_ratio, buffer_size;
  
  int cmd = read_command(freq);
  
  switch (cmd) {
    case CMD_NONE:
    case CMD_NOOP:
    case CMD_UNKNOWN:
      return;
      
    case CMD_STOP:
      stop_dac();
      return;
      
    default:
      // Do nothing, continue.
      break;
  }
  
  if (calculate_dac_buffer(freq, dac_ratio, buffer_size)) {
    stop_dac();
    
    fill_dac_buffer(cmd, dac_buffer, buffer_size);
    
    start_dac(dac_ratio, buffer_size);
  }
}

// Since we only use 3/4 of N_WAVE, we define only this many samples, in order to conserve data space.
const int16_t Sinewave[N_WAVE-N_WAVE/4] = {
  0, 50, 101, 151, 201, 251, 302, 352, 
  402, 452, 503, 553, 603, 653, 704, 754, 
  804, 854, 905, 955, 1005, 1055, 1106, 1156, 
  1206, 1256, 1307, 1357, 1407, 1457, 1507, 1558, 
  1608, 1658, 1708, 1758, 1809, 1859, 1909, 1959, 
  2009, 2060, 2110, 2160, 2210, 2260, 2310, 2360, 
  2411, 2461, 2511, 2561, 2611, 2661, 2711, 2761, 
  2811, 2861, 2912, 2962, 3012, 3062, 3112, 3162, 
  3212, 3262, 3312, 3362, 3412, 3462, 3512, 3562, 
  3612, 3662, 3712, 3762, 3812, 3861, 3911, 3961, 
  4011, 4061, 4111, 4161, 4211, 4260, 4310, 4360, 
  4410, 4460, 4510, 4559, 4609, 4659, 4709, 4758, 
  4808, 4858, 4907, 4957, 5007, 5057, 5106, 5156, 
  5205, 5255, 5305, 5354, 5404, 5453, 5503, 5553, 
  5602, 5652, 5701, 5751, 5800, 5850, 5899, 5948, 
  5998, 6047, 6097, 6146, 6195, 6245, 6294, 6343, 
  6393, 6442, 6491, 6541, 6590, 6639, 6688, 6737, 
  6787, 6836, 6885, 6934, 6983, 7032, 7081, 7130, 
  7180, 7229, 7278, 7327, 7376, 7425, 7473, 7522, 
  7571, 7620, 7669, 7718, 7767, 7816, 7864, 7913, 
  7962, 8011, 8059, 8108, 8157, 8206, 8254, 8303, 
  8351, 8400, 8449, 8497, 8546, 8594, 8643, 8691, 
  8740, 8788, 8836, 8885, 8933, 8982, 9030, 9078, 
  9127, 9175, 9223, 9271, 9319, 9368, 9416, 9464, 
  9512, 9560, 9608, 9656, 9704, 9752, 9800, 9848, 
  9896, 9944, 9992, 10040, 10088, 10135, 10183, 10231, 
  10279, 10326, 10374, 10422, 10469, 10517, 10565, 10612, 
  10660, 10707, 10755, 10802, 10850, 10897, 10945, 10992, 
  11039, 11087, 11134, 11181, 11228, 11276, 11323, 11370, 
  11417, 11464, 11511, 11558, 11605, 11652, 11699, 11746, 
  11793, 11840, 11887, 11934, 11980, 12027, 12074, 12121, 
  12167, 12214, 12261, 12307, 12354, 12400, 12447, 12493, 
  12540, 12586, 12633, 12679, 12725, 12772, 12818, 12864, 
  12910, 12957, 13003, 13049, 13095, 13141, 13187, 13233, 
  13279, 13325, 13371, 13417, 13463, 13508, 13554, 13600, 
  13646, 13691, 13737, 13783, 13828, 13874, 13919, 13965, 
  14010, 14056, 14101, 14146, 14192, 14237, 14282, 14327, 
  14373, 14418, 14463, 14508, 14553, 14598, 14643, 14688, 
  14733, 14778, 14823, 14867, 14912, 14957, 15002, 15046, 
  15091, 15136, 15180, 15225, 15269, 15314, 15358, 15402, 
  15447, 15491, 15535, 15580, 15624, 15668, 15712, 15756, 
  15800, 15844, 15888, 15932, 15976, 16020, 16064, 16108, 
  16151, 16195, 16239, 16282, 16326, 16369, 16413, 16456, 
  16500, 16543, 16587, 16630, 16673, 16717, 16760, 16803, 
  16846, 16889, 16932, 16975, 17018, 17061, 17104, 17147, 
  17190, 17233, 17275, 17318, 17361, 17403, 17446, 17488, 
  17531, 17573, 17616, 17658, 17700, 17743, 17785, 17827, 
  17869, 17911, 17953, 17995, 18037, 18079, 18121, 18163, 
  18205, 18247, 18288, 18330, 18372, 18413, 18455, 18496, 
  18538, 18579, 18621, 18662, 18703, 18745, 18786, 18827, 
  18868, 18909, 18950, 18991, 19032, 19073, 19114, 19155, 
  19195, 19236, 19277, 19317, 19358, 19399, 19439, 19479, 
  19520, 19560, 19601, 19641, 19681, 19721, 19761, 19801, 
  19841, 19881, 19921, 19961, 20001, 20041, 20081, 20120, 
  20160, 20200, 20239, 20279, 20318, 20357, 20397, 20436, 
  20475, 20515, 20554, 20593, 20632, 20671, 20710, 20749, 
  20788, 20827, 20865, 20904, 20943, 20981, 21020, 21059, 
  21097, 21136, 21174, 21212, 21251, 21289, 21327, 21365, 
  21403, 21441, 21479, 21517, 21555, 21593, 21631, 21668, 
  21706, 21744, 21781, 21819, 21856, 21894, 21931, 21968, 
  22006, 22043, 22080, 22117, 22154, 22191, 22228, 22265, 
  22302, 22339, 22375, 22412, 22449, 22485, 22522, 22558, 
  22595, 22631, 22668, 22704, 22740, 22776, 22812, 22848, 
  22884, 22920, 22956, 22992, 23028, 23064, 23099, 23135, 
  23170, 23206, 23241, 23277, 23312, 23348, 23383, 23418, 
  23453, 23488, 23523, 23558, 23593, 23628, 23663, 23697, 
  23732, 23767, 23801, 23836, 23870, 23905, 23939, 23973, 
  24008, 24042, 24076, 24110, 24144, 24178, 24212, 24246, 
  24279, 24313, 24347, 24380, 24414, 24448, 24481, 24514, 
  24548, 24581, 24614, 24647, 24680, 24713, 24746, 24779, 
  24812, 24845, 24878, 24910, 24943, 24976, 25008, 25041, 
  25073, 25105, 25138, 25170, 25202, 25234, 25266, 25298, 
  25330, 25362, 25394, 25425, 25457, 25489, 25520, 25552, 
  25583, 25615, 25646, 25677, 25708, 25739, 25771, 25802, 
  25833, 25863, 25894, 25925, 25956, 25986, 26017, 26048, 
  26078, 26108, 26139, 26169, 26199, 26229, 26259, 26290, 
  26320, 26349, 26379, 26409, 26439, 26468, 26498, 26528, 
  26557, 26586, 26616, 26645, 26674, 26704, 26733, 26762, 
  26791, 26820, 26848, 26877, 26906, 26935, 26963, 26992, 
  27020, 27049, 27077, 27105, 27133, 27162, 27190, 27218, 
  27246, 27273, 27301, 27329, 27357, 27384, 27412, 27440, 
  27467, 27494, 27522, 27549, 27576, 27603, 27630, 27657, 
  27684, 27711, 27738, 27765, 27791, 27818, 27844, 27871, 
  27897, 27924, 27950, 27976, 28002, 28028, 28054, 28080, 
  28106, 28132, 28158, 28183, 28209, 28234, 28260, 28285, 
  28311, 28336, 28361, 28386, 28411, 28436, 28461, 28486, 
  28511, 28536, 28560, 28585, 28610, 28634, 28658, 28683, 
  28707, 28731, 28755, 28779, 28803, 28827, 28851, 28875, 
  28899, 28922, 28946, 28970, 28993, 29016, 29040, 29063, 
  29086, 29109, 29132, 29155, 29178, 29201, 29224, 29247, 
  29269, 29292, 29314, 29337, 29359, 29381, 29404, 29426, 
  29448, 29470, 29492, 29514, 29535, 29557, 29579, 29600, 
  29622, 29643, 29665, 29686, 29707, 29729, 29750, 29771, 
  29792, 29813, 29833, 29854, 29875, 29895, 29916, 29936, 
  29957, 29977, 29997, 30018, 30038, 30058, 30078, 30098, 
  30118, 30137, 30157, 30177, 30196, 30216, 30235, 30254, 
  30274, 30293, 30312, 30331, 30350, 30369, 30388, 30407, 
  30425, 30444, 30462, 30481, 30499, 30518, 30536, 30554, 
  30572, 30590, 30608, 30626, 30644, 30662, 30680, 30697, 
  30715, 30732, 30750, 30767, 30784, 30801, 30819, 30836, 
  30853, 30869, 30886, 30903, 30920, 30936, 30953, 30969, 
  30986, 31002, 31018, 31034, 31050, 31067, 31082, 31098, 
  31114, 31130, 31146, 31161, 31177, 31192, 31207, 31223, 
  31238, 31253, 31268, 31283, 31298, 31313, 31328, 31342, 
  31357, 31372, 31386, 31400, 31415, 31429, 31443, 31457, 
  31471, 31485, 31499, 31513, 31527, 31540, 31554, 31568, 
  31581, 31594, 31608, 31621, 31634, 31647, 31660, 31673, 
  31686, 31699, 31711, 31724, 31737, 31749, 31761, 31774, 
  31786, 31798, 31810, 31822, 31834, 31846, 31858, 31870, 
  31881, 31893, 31904, 31916, 31927, 31938, 31950, 31961, 
  31972, 31983, 31994, 32005, 32015, 32026, 32037, 32047, 
  32058, 32068, 32078, 32088, 32099, 32109, 32119, 32129, 
  32138, 32148, 32158, 32167, 32177, 32186, 32196, 32205, 
  32214, 32224, 32233, 32242, 32251, 32259, 32268, 32277, 
  32286, 32294, 32303, 32311, 32319, 32328, 32336, 32344, 
  32352, 32360, 32368, 32376, 32383, 32391, 32398, 32406, 
  32413, 32421, 32428, 32435, 32442, 32449, 32456, 32463, 
  32470, 32477, 32483, 32490, 32496, 32503, 32509, 32515, 
  32522, 32528, 32534, 32540, 32546, 32551, 32557, 32563, 
  32568, 32574, 32579, 32585, 32590, 32595, 32600, 32605, 
  32610, 32615, 32620, 32625, 32629, 32634, 32638, 32643, 
  32647, 32651, 32656, 32660, 32664, 32668, 32672, 32675, 
  32679, 32683, 32686, 32690, 32693, 32697, 32700, 32703, 
  32706, 32709, 32712, 32715, 32718, 32721, 32723, 32726, 
  32729, 32731, 32733, 32736, 32738, 32740, 32742, 32744, 
  32746, 32748, 32749, 32751, 32753, 32754, 32756, 32757, 
  32758, 32759, 32760, 32761, 32762, 32763, 32764, 32765, 
  32766, 32766, 32767, 32767, 32767, 32767, 32767, 32767, 
  
  32767, 32767, 32767, 32767, 32767, 32767, 32767, 32766, 
  32766, 32765, 32764, 32763, 32762, 32761, 32760, 32759, 
  32758, 32757, 32756, 32754, 32753, 32751, 32749, 32748, 
  32746, 32744, 32742, 32740, 32738, 32736, 32733, 32731, 
  32729, 32726, 32723, 32721, 32718, 32715, 32712, 32709, 
  32706, 32703, 32700, 32697, 32693, 32690, 32686, 32683, 
  32679, 32675, 32672, 32668, 32664, 32660, 32656, 32651, 
  32647, 32643, 32638, 32634, 32629, 32625, 32620, 32615, 
  32610, 32605, 32600, 32595, 32590, 32585, 32579, 32574, 
  32568, 32563, 32557, 32551, 32546, 32540, 32534, 32528, 
  32522, 32515, 32509, 32503, 32496, 32490, 32483, 32477, 
  32470, 32463, 32456, 32449, 32442, 32435, 32428, 32421, 
  32413, 32406, 32398, 32391, 32383, 32376, 32368, 32360, 
  32352, 32344, 32336, 32328, 32319, 32311, 32303, 32294, 
  32286, 32277, 32268, 32259, 32251, 32242, 32233, 32224, 
  32214, 32205, 32196, 32186, 32177, 32167, 32158, 32148, 
  32138, 32129, 32119, 32109, 32099, 32088, 32078, 32068, 
  32058, 32047, 32037, 32026, 32015, 32005, 31994, 31983, 
  31972, 31961, 31950, 31938, 31927, 31916, 31904, 31893, 
  31881, 31870, 31858, 31846, 31834, 31822, 31810, 31798, 
  31786, 31774, 31761, 31749, 31737, 31724, 31711, 31699, 
  31686, 31673, 31660, 31647, 31634, 31621, 31608, 31594, 
  31581, 31568, 31554, 31540, 31527, 31513, 31499, 31485, 
  31471, 31457, 31443, 31429, 31415, 31400, 31386, 31372, 
  31357, 31342, 31328, 31313, 31298, 31283, 31268, 31253, 
  31238, 31223, 31207, 31192, 31177, 31161, 31146, 31130, 
  31114, 31098, 31082, 31067, 31050, 31034, 31018, 31002, 
  30986, 30969, 30953, 30936, 30920, 30903, 30886, 30869, 
  30853, 30836, 30819, 30801, 30784, 30767, 30750, 30732, 
  30715, 30697, 30680, 30662, 30644, 30626, 30608, 30590, 
  30572, 30554, 30536, 30518, 30499, 30481, 30462, 30444, 
  30425, 30407, 30388, 30369, 30350, 30331, 30312, 30293, 
  30274, 30254, 30235, 30216, 30196, 30177, 30157, 30137, 
  30118, 30098, 30078, 30058, 30038, 30018, 29997, 29977, 
  29957, 29936, 29916, 29895, 29875, 29854, 29833, 29813, 
  29792, 29771, 29750, 29729, 29707, 29686, 29665, 29643, 
  29622, 29600, 29579, 29557, 29535, 29514, 29492, 29470, 
  29448, 29426, 29404, 29381, 29359, 29337, 29314, 29292, 
  29269, 29247, 29224, 29201, 29178, 29155, 29132, 29109, 
  29086, 29063, 29040, 29016, 28993, 28970, 28946, 28922, 
  28899, 28875, 28851, 28827, 28803, 28779, 28755, 28731, 
  28707, 28683, 28658, 28634, 28610, 28585, 28560, 28536, 
  28511, 28486, 28461, 28436, 28411, 28386, 28361, 28336, 
  28311, 28285, 28260, 28234, 28209, 28183, 28158, 28132, 
  28106, 28080, 28054, 28028, 28002, 27976, 27950, 27924, 
  27897, 27871, 27844, 27818, 27791, 27765, 27738, 27711, 
  27684, 27657, 27630, 27603, 27576, 27549, 27522, 27494, 
  27467, 27440, 27412, 27384, 27357, 27329, 27301, 27273, 
  27246, 27218, 27190, 27162, 27133, 27105, 27077, 27049, 
  27020, 26992, 26963, 26935, 26906, 26877, 26848, 26820, 
  26791, 26762, 26733, 26704, 26674, 26645, 26616, 26586, 
  26557, 26528, 26498, 26468, 26439, 26409, 26379, 26349, 
  26320, 26290, 26259, 26229, 26199, 26169, 26139, 26108, 
  26078, 26048, 26017, 25986, 25956, 25925, 25894, 25863, 
  25833, 25802, 25771, 25739, 25708, 25677, 25646, 25615, 
  25583, 25552, 25520, 25489, 25457, 25425, 25394, 25362, 
  25330, 25298, 25266, 25234, 25202, 25170, 25138, 25105, 
  25073, 25041, 25008, 24976, 24943, 24910, 24878, 24845, 
  24812, 24779, 24746, 24713, 24680, 24647, 24614, 24581, 
  24548, 24514, 24481, 24448, 24414, 24380, 24347, 24313, 
  24279, 24246, 24212, 24178, 24144, 24110, 24076, 24042, 
  24008, 23973, 23939, 23905, 23870, 23836, 23801, 23767, 
  23732, 23697, 23663, 23628, 23593, 23558, 23523, 23488, 
  23453, 23418, 23383, 23348, 23312, 23277, 23241, 23206, 
  23170, 23135, 23099, 23064, 23028, 22992, 22956, 22920, 
  22884, 22848, 22812, 22776, 22740, 22704, 22668, 22631, 
  22595, 22558, 22522, 22485, 22449, 22412, 22375, 22339, 
  22302, 22265, 22228, 22191, 22154, 22117, 22080, 22043, 
  22006, 21968, 21931, 21894, 21856, 21819, 21781, 21744, 
  21706, 21668, 21631, 21593, 21555, 21517, 21479, 21441, 
  21403, 21365, 21327, 21289, 21251, 21212, 21174, 21136, 
  21097, 21059, 21020, 20981, 20943, 20904, 20865, 20827, 
  20788, 20749, 20710, 20671, 20632, 20593, 20554, 20515, 
  20475, 20436, 20397, 20357, 20318, 20279, 20239, 20200, 
  20160, 20120, 20081, 20041, 20001, 19961, 19921, 19881, 
  19841, 19801, 19761, 19721, 19681, 19641, 19601, 19560, 
  19520, 19479, 19439, 19399, 19358, 19317, 19277, 19236, 
  19195, 19155, 19114, 19073, 19032, 18991, 18950, 18909, 
  18868, 18827, 18786, 18745, 18703, 18662, 18621, 18579, 
  18538, 18496, 18455, 18413, 18372, 18330, 18288, 18247, 
  18205, 18163, 18121, 18079, 18037, 17995, 17953, 17911, 
  17869, 17827, 17785, 17743, 17700, 17658, 17616, 17573, 
  17531, 17488, 17446, 17403, 17361, 17318, 17275, 17233, 
  17190, 17147, 17104, 17061, 17018, 16975, 16932, 16889, 
  16846, 16803, 16760, 16717, 16673, 16630, 16587, 16543, 
  16500, 16456, 16413, 16369, 16326, 16282, 16239, 16195, 
  16151, 16108, 16064, 16020, 15976, 15932, 15888, 15844, 
  15800, 15756, 15712, 15668, 15624, 15580, 15535, 15491, 
  15447, 15402, 15358, 15314, 15269, 15225, 15180, 15136, 
  15091, 15046, 15002, 14957, 14912, 14867, 14823, 14778, 
  14733, 14688, 14643, 14598, 14553, 14508, 14463, 14418, 
  14373, 14327, 14282, 14237, 14192, 14146, 14101, 14056, 
  14010, 13965, 13919, 13874, 13828, 13783, 13737, 13691, 
  13646, 13600, 13554, 13508, 13463, 13417, 13371, 13325, 
  13279, 13233, 13187, 13141, 13095, 13049, 13003, 12957, 
  12910, 12864, 12818, 12772, 12725, 12679, 12633, 12586, 
  12540, 12493, 12447, 12400, 12354, 12307, 12261, 12214, 
  12167, 12121, 12074, 12027, 11980, 11934, 11887, 11840, 
  11793, 11746, 11699, 11652, 11605, 11558, 11511, 11464, 
  11417, 11370, 11323, 11276, 11228, 11181, 11134, 11087, 
  11039, 10992, 10945, 10897, 10850, 10802, 10755, 10707, 
  10660, 10612, 10565, 10517, 10469, 10422, 10374, 10326, 
  10279, 10231, 10183, 10135, 10088, 10040, 9992, 9944, 
  9896, 9848, 9800, 9752, 9704, 9656, 9608, 9560, 
  9512, 9464, 9416, 9368, 9319, 9271, 9223, 9175, 
  9127, 9078, 9030, 8982, 8933, 8885, 8836, 8788, 
  8740, 8691, 8643, 8594, 8546, 8497, 8449, 8400, 
  8351, 8303, 8254, 8206, 8157, 8108, 8059, 8011, 
  7962, 7913, 7864, 7816, 7767, 7718, 7669, 7620, 
  7571, 7522, 7473, 7425, 7376, 7327, 7278, 7229, 
  7180, 7130, 7081, 7032, 6983, 6934, 6885, 6836, 
  6787, 6737, 6688, 6639, 6590, 6541, 6491, 6442, 
  6393, 6343, 6294, 6245, 6195, 6146, 6097, 6047, 
  5998, 5948, 5899, 5850, 5800, 5751, 5701, 5652, 
  5602, 5553, 5503, 5453, 5404, 5354, 5305, 5255, 
  5205, 5156, 5106, 5057, 5007, 4957, 4907, 4858, 
  4808, 4758, 4709, 4659, 4609, 4559, 4510, 4460, 
  4410, 4360, 4310, 4260, 4211, 4161, 4111, 4061, 
  4011, 3961, 3911, 3861, 3812, 3762, 3712, 3662, 
  3612, 3562, 3512, 3462, 3412, 3362, 3312, 3262, 
  3212, 3162, 3112, 3062, 3012, 2962, 2912, 2861, 
  2811, 2761, 2711, 2661, 2611, 2561, 2511, 2461, 
  2411, 2360, 2310, 2260, 2210, 2160, 2110, 2060, 
  2009, 1959, 1909, 1859, 1809, 1758, 1708, 1658, 
  1608, 1558, 1507, 1457, 1407, 1357, 1307, 1256, 
  1206, 1156, 1106, 1055, 1005, 955, 905, 854, 
  804, 754, 704, 653, 603, 553, 503, 452, 
  402, 352, 302, 251, 201, 151, 101, 50, 
  
  0, -50, -101, -151, -201, -251, -302, -352, 
  -402, -452, -503, -553, -603, -653, -704, -754, 
  -804, -854, -905, -955, -1005, -1055, -1106, -1156, 
  -1206, -1256, -1307, -1357, -1407, -1457, -1507, -1558, 
  -1608, -1658, -1708, -1758, -1809, -1859, -1909, -1959, 
  -2009, -2060, -2110, -2160, -2210, -2260, -2310, -2360, 
  -2411, -2461, -2511, -2561, -2611, -2661, -2711, -2761, 
  -2811, -2861, -2912, -2962, -3012, -3062, -3112, -3162, 
  -3212, -3262, -3312, -3362, -3412, -3462, -3512, -3562, 
  -3612, -3662, -3712, -3762, -3812, -3861, -3911, -3961, 
  -4011, -4061, -4111, -4161, -4211, -4260, -4310, -4360, 
  -4410, -4460, -4510, -4559, -4609, -4659, -4709, -4758, 
  -4808, -4858, -4907, -4957, -5007, -5057, -5106, -5156, 
  -5205, -5255, -5305, -5354, -5404, -5453, -5503, -5553, 
  -5602, -5652, -5701, -5751, -5800, -5850, -5899, -5948, 
  -5998, -6047, -6097, -6146, -6195, -6245, -6294, -6343, 
  -6393, -6442, -6491, -6541, -6590, -6639, -6688, -6737, 
  -6787, -6836, -6885, -6934, -6983, -7032, -7081, -7130, 
  -7180, -7229, -7278, -7327, -7376, -7425, -7473, -7522, 
  -7571, -7620, -7669, -7718, -7767, -7816, -7864, -7913, 
  -7962, -8011, -8059, -8108, -8157, -8206, -8254, -8303, 
  -8351, -8400, -8449, -8497, -8546, -8594, -8643, -8691, 
  -8740, -8788, -8836, -8885, -8933, -8982, -9030, -9078, 
  -9127, -9175, -9223, -9271, -9319, -9368, -9416, -9464, 
  -9512, -9560, -9608, -9656, -9704, -9752, -9800, -9848, 
  -9896, -9944, -9992, -10040, -10088, -10135, -10183, -10231, 
  -10279, -10326, -10374, -10422, -10469, -10517, -10565, -10612, 
  -10660, -10707, -10755, -10802, -10850, -10897, -10945, -10992, 
  -11039, -11087, -11134, -11181, -11228, -11276, -11323, -11370, 
  -11417, -11464, -11511, -11558, -11605, -11652, -11699, -11746, 
  -11793, -11840, -11887, -11934, -11980, -12027, -12074, -12121, 
  -12167, -12214, -12261, -12307, -12354, -12400, -12447, -12493, 
  -12540, -12586, -12633, -12679, -12725, -12772, -12818, -12864, 
  -12910, -12957, -13003, -13049, -13095, -13141, -13187, -13233, 
  -13279, -13325, -13371, -13417, -13463, -13508, -13554, -13600, 
  -13646, -13691, -13737, -13783, -13828, -13874, -13919, -13965, 
  -14010, -14056, -14101, -14146, -14192, -14237, -14282, -14327, 
  -14373, -14418, -14463, -14508, -14553, -14598, -14643, -14688, 
  -14733, -14778, -14823, -14867, -14912, -14957, -15002, -15046, 
  -15091, -15136, -15180, -15225, -15269, -15314, -15358, -15402, 
  -15447, -15491, -15535, -15580, -15624, -15668, -15712, -15756, 
  -15800, -15844, -15888, -15932, -15976, -16020, -16064, -16108, 
  -16151, -16195, -16239, -16282, -16326, -16369, -16413, -16456, 
  -16500, -16543, -16587, -16630, -16673, -16717, -16760, -16803, 
  -16846, -16889, -16932, -16975, -17018, -17061, -17104, -17147, 
  -17190, -17233, -17275, -17318, -17361, -17403, -17446, -17488, 
  -17531, -17573, -17616, -17658, -17700, -17743, -17785, -17827, 
  -17869, -17911, -17953, -17995, -18037, -18079, -18121, -18163, 
  -18205, -18247, -18288, -18330, -18372, -18413, -18455, -18496, 
  -18538, -18579, -18621, -18662, -18703, -18745, -18786, -18827, 
  -18868, -18909, -18950, -18991, -19032, -19073, -19114, -19155, 
  -19195, -19236, -19277, -19317, -19358, -19399, -19439, -19479, 
  -19520, -19560, -19601, -19641, -19681, -19721, -19761, -19801, 
  -19841, -19881, -19921, -19961, -20001, -20041, -20081, -20120, 
  -20160, -20200, -20239, -20279, -20318, -20357, -20397, -20436, 
  -20475, -20515, -20554, -20593, -20632, -20671, -20710, -20749, 
  -20788, -20827, -20865, -20904, -20943, -20981, -21020, -21059, 
  -21097, -21136, -21174, -21212, -21251, -21289, -21327, -21365, 
  -21403, -21441, -21479, -21517, -21555, -21593, -21631, -21668, 
  -21706, -21744, -21781, -21819, -21856, -21894, -21931, -21968, 
  -22006, -22043, -22080, -22117, -22154, -22191, -22228, -22265, 
  -22302, -22339, -22375, -22412, -22449, -22485, -22522, -22558, 
  -22595, -22631, -22668, -22704, -22740, -22776, -22812, -22848, 
  -22884, -22920, -22956, -22992, -23028, -23064, -23099, -23135, 
  -23170, -23206, -23241, -23277, -23312, -23348, -23383, -23418, 
  -23453, -23488, -23523, -23558, -23593, -23628, -23663, -23697, 
  -23732, -23767, -23801, -23836, -23870, -23905, -23939, -23973, 
  -24008, -24042, -24076, -24110, -24144, -24178, -24212, -24246, 
  -24279, -24313, -24347, -24380, -24414, -24448, -24481, -24514, 
  -24548, -24581, -24614, -24647, -24680, -24713, -24746, -24779, 
  -24812, -24845, -24878, -24910, -24943, -24976, -25008, -25041, 
  -25073, -25105, -25138, -25170, -25202, -25234, -25266, -25298, 
  -25330, -25362, -25394, -25425, -25457, -25489, -25520, -25552, 
  -25583, -25615, -25646, -25677, -25708, -25739, -25771, -25802, 
  -25833, -25863, -25894, -25925, -25956, -25986, -26017, -26048, 
  -26078, -26108, -26139, -26169, -26199, -26229, -26259, -26290, 
  -26320, -26349, -26379, -26409, -26439, -26468, -26498, -26528, 
  -26557, -26586, -26616, -26645, -26674, -26704, -26733, -26762, 
  -26791, -26820, -26848, -26877, -26906, -26935, -26963, -26992, 
  -27020, -27049, -27077, -27105, -27133, -27162, -27190, -27218, 
  -27246, -27273, -27301, -27329, -27357, -27384, -27412, -27440, 
  -27467, -27494, -27522, -27549, -27576, -27603, -27630, -27657, 
  -27684, -27711, -27738, -27765, -27791, -27818, -27844, -27871, 
  -27897, -27924, -27950, -27976, -28002, -28028, -28054, -28080, 
  -28106, -28132, -28158, -28183, -28209, -28234, -28260, -28285, 
  -28311, -28336, -28361, -28386, -28411, -28436, -28461, -28486, 
  -28511, -28536, -28560, -28585, -28610, -28634, -28658, -28683, 
  -28707, -28731, -28755, -28779, -28803, -28827, -28851, -28875, 
  -28899, -28922, -28946, -28970, -28993, -29016, -29040, -29063, 
  -29086, -29109, -29132, -29155, -29178, -29201, -29224, -29247, 
  -29269, -29292, -29314, -29337, -29359, -29381, -29404, -29426, 
  -29448, -29470, -29492, -29514, -29535, -29557, -29579, -29600, 
  -29622, -29643, -29665, -29686, -29707, -29729, -29750, -29771, 
  -29792, -29813, -29833, -29854, -29875, -29895, -29916, -29936, 
  -29957, -29977, -29997, -30018, -30038, -30058, -30078, -30098, 
  -30118, -30137, -30157, -30177, -30196, -30216, -30235, -30254, 
  -30274, -30293, -30312, -30331, -30350, -30369, -30388, -30407, 
  -30425, -30444, -30462, -30481, -30499, -30518, -30536, -30554, 
  -30572, -30590, -30608, -30626, -30644, -30662, -30680, -30697, 
  -30715, -30732, -30750, -30767, -30784, -30801, -30819, -30836, 
  -30853, -30869, -30886, -30903, -30920, -30936, -30953, -30969, 
  -30986, -31002, -31018, -31034, -31050, -31067, -31082, -31098, 
  -31114, -31130, -31146, -31161, -31177, -31192, -31207, -31223, 
  -31238, -31253, -31268, -31283, -31298, -31313, -31328, -31342, 
  -31357, -31372, -31386, -31400, -31415, -31429, -31443, -31457, 
  -31471, -31485, -31499, -31513, -31527, -31540, -31554, -31568, 
  -31581, -31594, -31608, -31621, -31634, -31647, -31660, -31673, 
  -31686, -31699, -31711, -31724, -31737, -31749, -31761, -31774, 
  -31786, -31798, -31810, -31822, -31834, -31846, -31858, -31870, 
  -31881, -31893, -31904, -31916, -31927, -31938, -31950, -31961, 
  -31972, -31983, -31994, -32005, -32015, -32026, -32037, -32047, 
  -32058, -32068, -32078, -32088, -32099, -32109, -32119, -32129, 
  -32138, -32148, -32158, -32167, -32177, -32186, -32196, -32205, 
  -32214, -32224, -32233, -32242, -32251, -32259, -32268, -32277, 
  -32286, -32294, -32303, -32311, -32319, -32328, -32336, -32344, 
  -32352, -32360, -32368, -32376, -32383, -32391, -32398, -32406, 
  -32413, -32421, -32428, -32435, -32442, -32449, -32456, -32463, 
  -32470, -32477, -32483, -32490, -32496, -32503, -32509, -32515, 
  -32522, -32528, -32534, -32540, -32546, -32551, -32557, -32563, 
  -32568, -32574, -32579, -32585, -32590, -32595, -32600, -32605, 
  -32610, -32615, -32620, -32625, -32629, -32634, -32638, -32643, 
  -32647, -32651, -32656, -32660, -32664, -32668, -32672, -32675, 
  -32679, -32683, -32686, -32690, -32693, -32697, -32700, -32703, 
  -32706, -32709, -32712, -32715, -32718, -32721, -32723, -32726, 
  -32729, -32731, -32733, -32736, -32738, -32740, -32742, -32744, 
  -32746, -32748, -32749, -32751, -32753, -32754, -32756, -32757, 
  -32758, -32759, -32760, -32761, -32762, -32763, -32764, -32765, 
  -32766, -32766, -32767, -32767, -32767, -32767, -32767, -32767, 
  
  /*-32767, -32767, -32767, -32767, -32767, -32767, -32767, -32766, 
  -32766, -32765, -32764, -32763, -32762, -32761, -32760, -32759, 
  -32758, -32757, -32756, -32754, -32753, -32751, -32749, -32748, 
  -32746, -32744, -32742, -32740, -32738, -32736, -32733, -32731, 
  -32729, -32726, -32723, -32721, -32718, -32715, -32712, -32709, 
  -32706, -32703, -32700, -32697, -32693, -32690, -32686, -32683, 
  -32679, -32675, -32672, -32668, -32664, -32660, -32656, -32651, 
  -32647, -32643, -32638, -32634, -32629, -32625, -32620, -32615, 
  -32610, -32605, -32600, -32595, -32590, -32585, -32579, -32574, 
  -32568, -32563, -32557, -32551, -32546, -32540, -32534, -32528, 
  -32522, -32515, -32509, -32503, -32496, -32490, -32483, -32477, 
  -32470, -32463, -32456, -32449, -32442, -32435, -32428, -32421, 
  -32413, -32406, -32398, -32391, -32383, -32376, -32368, -32360, 
  -32352, -32344, -32336, -32328, -32319, -32311, -32303, -32294, 
  -32286, -32277, -32268, -32259, -32251, -32242, -32233, -32224, 
  -32214, -32205, -32196, -32186, -32177, -32167, -32158, -32148, 
  -32138, -32129, -32119, -32109, -32099, -32088, -32078, -32068, 
  -32058, -32047, -32037, -32026, -32015, -32005, -31994, -31983, 
  -31972, -31961, -31950, -31938, -31927, -31916, -31904, -31893, 
  -31881, -31870, -31858, -31846, -31834, -31822, -31810, -31798, 
  -31786, -31774, -31761, -31749, -31737, -31724, -31711, -31699, 
  -31686, -31673, -31660, -31647, -31634, -31621, -31608, -31594, 
  -31581, -31568, -31554, -31540, -31527, -31513, -31499, -31485, 
  -31471, -31457, -31443, -31429, -31415, -31400, -31386, -31372, 
  -31357, -31342, -31328, -31313, -31298, -31283, -31268, -31253, 
  -31238, -31223, -31207, -31192, -31177, -31161, -31146, -31130, 
  -31114, -31098, -31082, -31067, -31050, -31034, -31018, -31002, 
  -30986, -30969, -30953, -30936, -30920, -30903, -30886, -30869, 
  -30853, -30836, -30819, -30801, -30784, -30767, -30750, -30732, 
  -30715, -30697, -30680, -30662, -30644, -30626, -30608, -30590, 
  -30572, -30554, -30536, -30518, -30499, -30481, -30462, -30444, 
  -30425, -30407, -30388, -30369, -30350, -30331, -30312, -30293, 
  -30274, -30254, -30235, -30216, -30196, -30177, -30157, -30137, 
  -30118, -30098, -30078, -30058, -30038, -30018, -29997, -29977, 
  -29957, -29936, -29916, -29895, -29875, -29854, -29833, -29813, 
  -29792, -29771, -29750, -29729, -29707, -29686, -29665, -29643, 
  -29622, -29600, -29579, -29557, -29535, -29514, -29492, -29470, 
  -29448, -29426, -29404, -29381, -29359, -29337, -29314, -29292, 
  -29269, -29247, -29224, -29201, -29178, -29155, -29132, -29109, 
  -29086, -29063, -29040, -29016, -28993, -28970, -28946, -28922, 
  -28899, -28875, -28851, -28827, -28803, -28779, -28755, -28731, 
  -28707, -28683, -28658, -28634, -28610, -28585, -28560, -28536, 
  -28511, -28486, -28461, -28436, -28411, -28386, -28361, -28336, 
  -28311, -28285, -28260, -28234, -28209, -28183, -28158, -28132, 
  -28106, -28080, -28054, -28028, -28002, -27976, -27950, -27924, 
  -27897, -27871, -27844, -27818, -27791, -27765, -27738, -27711, 
  -27684, -27657, -27630, -27603, -27576, -27549, -27522, -27494, 
  -27467, -27440, -27412, -27384, -27357, -27329, -27301, -27273, 
  -27246, -27218, -27190, -27162, -27133, -27105, -27077, -27049, 
  -27020, -26992, -26963, -26935, -26906, -26877, -26848, -26820, 
  -26791, -26762, -26733, -26704, -26674, -26645, -26616, -26586, 
  -26557, -26528, -26498, -26468, -26439, -26409, -26379, -26349, 
  -26320, -26290, -26259, -26229, -26199, -26169, -26139, -26108, 
  -26078, -26048, -26017, -25986, -25956, -25925, -25894, -25863, 
  -25833, -25802, -25771, -25739, -25708, -25677, -25646, -25615, 
  -25583, -25552, -25520, -25489, -25457, -25425, -25394, -25362, 
  -25330, -25298, -25266, -25234, -25202, -25170, -25138, -25105, 
  -25073, -25041, -25008, -24976, -24943, -24910, -24878, -24845, 
  -24812, -24779, -24746, -24713, -24680, -24647, -24614, -24581, 
  -24548, -24514, -24481, -24448, -24414, -24380, -24347, -24313, 
  -24279, -24246, -24212, -24178, -24144, -24110, -24076, -24042, 
  -24008, -23973, -23939, -23905, -23870, -23836, -23801, -23767, 
  -23732, -23697, -23663, -23628, -23593, -23558, -23523, -23488, 
  -23453, -23418, -23383, -23348, -23312, -23277, -23241, -23206, 
  -23170, -23135, -23099, -23064, -23028, -22992, -22956, -22920, 
  -22884, -22848, -22812, -22776, -22740, -22704, -22668, -22631, 
  -22595, -22558, -22522, -22485, -22449, -22412, -22375, -22339, 
  -22302, -22265, -22228, -22191, -22154, -22117, -22080, -22043, 
  -22006, -21968, -21931, -21894, -21856, -21819, -21781, -21744, 
  -21706, -21668, -21631, -21593, -21555, -21517, -21479, -21441, 
  -21403, -21365, -21327, -21289, -21251, -21212, -21174, -21136, 
  -21097, -21059, -21020, -20981, -20943, -20904, -20865, -20827, 
  -20788, -20749, -20710, -20671, -20632, -20593, -20554, -20515, 
  -20475, -20436, -20397, -20357, -20318, -20279, -20239, -20200, 
  -20160, -20120, -20081, -20041, -20001, -19961, -19921, -19881, 
  -19841, -19801, -19761, -19721, -19681, -19641, -19601, -19560, 
  -19520, -19479, -19439, -19399, -19358, -19317, -19277, -19236, 
  -19195, -19155, -19114, -19073, -19032, -18991, -18950, -18909, 
  -18868, -18827, -18786, -18745, -18703, -18662, -18621, -18579, 
  -18538, -18496, -18455, -18413, -18372, -18330, -18288, -18247, 
  -18205, -18163, -18121, -18079, -18037, -17995, -17953, -17911, 
  -17869, -17827, -17785, -17743, -17700, -17658, -17616, -17573, 
  -17531, -17488, -17446, -17403, -17361, -17318, -17275, -17233, 
  -17190, -17147, -17104, -17061, -17018, -16975, -16932, -16889, 
  -16846, -16803, -16760, -16717, -16673, -16630, -16587, -16543, 
  -16500, -16456, -16413, -16369, -16326, -16282, -16239, -16195, 
  -16151, -16108, -16064, -16020, -15976, -15932, -15888, -15844, 
  -15800, -15756, -15712, -15668, -15624, -15580, -15535, -15491, 
  -15447, -15402, -15358, -15314, -15269, -15225, -15180, -15136, 
  -15091, -15046, -15002, -14957, -14912, -14867, -14823, -14778, 
  -14733, -14688, -14643, -14598, -14553, -14508, -14463, -14418, 
  -14373, -14327, -14282, -14237, -14192, -14146, -14101, -14056, 
  -14010, -13965, -13919, -13874, -13828, -13783, -13737, -13691, 
  -13646, -13600, -13554, -13508, -13463, -13417, -13371, -13325, 
  -13279, -13233, -13187, -13141, -13095, -13049, -13003, -12957, 
  -12910, -12864, -12818, -12772, -12725, -12679, -12633, -12586, 
  -12540, -12493, -12447, -12400, -12354, -12307, -12261, -12214, 
  -12167, -12121, -12074, -12027, -11980, -11934, -11887, -11840, 
  -11793, -11746, -11699, -11652, -11605, -11558, -11511, -11464, 
  -11417, -11370, -11323, -11276, -11228, -11181, -11134, -11087, 
  -11039, -10992, -10945, -10897, -10850, -10802, -10755, -10707, 
  -10660, -10612, -10565, -10517, -10469, -10422, -10374, -10326, 
  -10279, -10231, -10183, -10135, -10088, -10040, -9992, -9944, 
  -9896, -9848, -9800, -9752, -9704, -9656, -9608, -9560, 
  -9512, -9464, -9416, -9368, -9319, -9271, -9223, -9175, 
  -9127, -9078, -9030, -8982, -8933, -8885, -8836, -8788, 
  -8740, -8691, -8643, -8594, -8546, -8497, -8449, -8400, 
  -8351, -8303, -8254, -8206, -8157, -8108, -8059, -8011, 
  -7962, -7913, -7864, -7816, -7767, -7718, -7669, -7620, 
  -7571, -7522, -7473, -7425, -7376, -7327, -7278, -7229, 
  -7180, -7130, -7081, -7032, -6983, -6934, -6885, -6836, 
  -6787, -6737, -6688, -6639, -6590, -6541, -6491, -6442, 
  -6393, -6343, -6294, -6245, -6195, -6146, -6097, -6047, 
  -5998, -5948, -5899, -5850, -5800, -5751, -5701, -5652, 
  -5602, -5553, -5503, -5453, -5404, -5354, -5305, -5255, 
  -5205, -5156, -5106, -5057, -5007, -4957, -4907, -4858, 
  -4808, -4758, -4709, -4659, -4609, -4559, -4510, -4460, 
  -4410, -4360, -4310, -4260, -4211, -4161, -4111, -4061, 
  -4011, -3961, -3911, -3861, -3812, -3762, -3712, -3662, 
  -3612, -3562, -3512, -3462, -3412, -3362, -3312, -3262, 
  -3212, -3162, -3112, -3062, -3012, -2962, -2912, -2861, 
  -2811, -2761, -2711, -2661, -2611, -2561, -2511, -2461, 
  -2411, -2360, -2310, -2260, -2210, -2160, -2110, -2060, 
  -2009, -1959, -1909, -1859, -1809, -1758, -1708, -1658, 
  -1608, -1558, -1507, -1457, -1407, -1357, -1307, -1256, 
  -1206, -1156, -1106, -1055, -1005, -955, -905, -854, 
  -804, -754, -704, -653, -603, -553, -503, -452, 
  -402, -352, -302, -251, -201, -151, -101, -50, */
};
 
/*
  FIX_MPY() - fixed-point multiplication & scaling.
  Substitute inline assembly for hardware-specific
  optimization suited to a particluar DSP processor.
  Scaling ensures that result remains 16-bit.
*/
inline int16_t FIX_MPY(int16_t a, int16_t b)
{   
    int32_t c = ((int32_t)a * (int32_t)b) >> (sizeof(a) * 8 - 2);

    b = c & 0x01;
    a = (c >> 1) + b;
 
    return a;
}
 
/*
  fix_fft() - perform forward/inverse fast Fourier transform.
  fr[n],fi[n] are real and imaginary arrays, both INPUT AND
  RESULT (in-place FFT), with 0 <= n < 2**m; set inverse to
  0 for forward transform (FFT), or 1 for iFFT.
*/
int16_t fix_fft(int16_t fr[], int16_t fi[], int m, int inverse)
{
  int16_t mr, nn, i, j, l, k, istep, n, scale, shift;
  int16_t qr, qi, tr, ti, wr, wi;
 
  int16_t max_val = (~((typeof(fr[0])) 0)) >> 2;
 
  n = 1 << m;
 
   /* max FFT size = N_WAVE */
  if (n > N_WAVE)
    return -1;

  mr = 0;
  nn = n - 1;
  scale = 0;
 
  /* decimation in time - re-order data */
  for (m=1; m<=nn; ++m) {
    l = n;
    do {
      l >>= 1;
    } while (mr+l > nn);
    mr = (mr & (l-1)) + l;
 
    if (mr <= m)
      continue;
    tr = fr[m];
    fr[m] = fr[mr];
    fr[mr] = tr;
    ti = fi[m];
    fi[m] = fi[mr];
    fi[mr] = ti;
  }
 
  l = 1;
  k = LOG2_N_WAVE-1;
  while (l < n) {
    if (inverse) {
      /* variable scaling, depending upon data */
      shift = 0;
      for (i=0; i<n; ++i) {
          j = fr[i];
          if (j < 0)
            j = -j;
          m = fi[i];
          if (m < 0)
            m = -m;
          if (j > max_val || m > max_val) {
            shift = 1;
            break;
          }
      }
      if (shift)
          ++scale;
    } else {
      /*
        fixed scaling, for proper normalization --
        there will be log2(n) passes, so this results
        in an overall factor of 1/n, distributed to
        maximize arithmetic accuracy.
      */
      shift = 1;
    }
    /*
      it may not be obvious, but the shift will be
      performed on each data point exactly once,
      during this pass.
    */
    istep = l << 1;
    for (m=0; m<l; ++m) {
      j = m << k;
      /* 0 <= j < N_WAVE/2 */
      wr = Sinewave[j+N_WAVE/4];
        
 
      wi = -Sinewave[j];
      if (inverse)
          wi = -wi;
      if (shift) {
          wr >>= 1;
          wi >>= 1;
      }
      for (i=m; i<n; i+=istep) {
          j = i + l;
          tr = FIX_MPY(wr,fr[j]) - FIX_MPY(wi,fi[j]);
          ti = FIX_MPY(wr,fi[j]) + FIX_MPY(wi,fr[j]);
          qr = fr[i];
          qi = fi[i];
          if (shift) {
            qr >>= 1;
            qi >>= 1;
          }
          fr[j] = qr - tr;
          fi[j] = qi - ti;
          fr[i] = qr + tr;
          fi[i] = qi + ti;
      }
    }
    --k;
    l = istep;
  }
  return scale;
}

// Blackman window weights for 2048 points.
static const int16_t blackman_window[N_WAVE / 2] = {
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 1, 1, 1, 
1, 2, 2, 2, 2, 3, 3, 3, 
3, 4, 4, 5, 5, 5, 6, 6, 
7, 7, 8, 8, 9, 9, 10, 10, 
11, 11, 12, 12, 13, 14, 14, 15, 
16, 16, 17, 18, 18, 19, 20, 21, 
21, 22, 23, 24, 25, 25, 26, 27, 
28, 29, 30, 31, 32, 33, 34, 35, 
36, 37, 38, 39, 40, 41, 42, 43, 
44, 45, 46, 48, 49, 50, 51, 52, 
54, 55, 56, 57, 59, 60, 61, 63, 
64, 65, 67, 68, 69, 71, 72, 74, 
75, 77, 78, 80, 81, 83, 84, 86, 
87, 89, 91, 92, 94, 96, 97, 99, 
101, 102, 104, 106, 108, 109, 111, 113, 
115, 117, 118, 120, 122, 124, 126, 128, 
130, 132, 134, 136, 138, 140, 142, 144, 
146, 148, 150, 152, 154, 156, 159, 161, 
163, 165, 167, 170, 172, 174, 176, 179, 
181, 183, 186, 188, 190, 193, 195, 198, 
200, 202, 205, 207, 210, 212, 215, 217, 
220, 223, 225, 228, 230, 233, 236, 238, 
241, 244, 247, 249, 252, 255, 258, 260, 
263, 266, 269, 272, 275, 278, 280, 283, 
286, 289, 292, 295, 298, 301, 304, 307, 
311, 314, 317, 320, 323, 326, 329, 333, 
336, 339, 342, 346, 349, 352, 356, 359, 
362, 366, 369, 372, 376, 379, 383, 386, 
390, 393, 397, 400, 404, 407, 411, 415, 
418, 422, 426, 429, 433, 437, 440, 444, 
448, 452, 456, 459, 463, 467, 471, 475, 
479, 483, 487, 491, 495, 499, 503, 507, 
511, 515, 519, 523, 527, 532, 536, 540, 
544, 548, 553, 557, 561, 565, 570, 574, 
579, 583, 587, 592, 596, 601, 605, 610, 
614, 619, 623, 628, 632, 637, 642, 646, 
651, 656, 660, 665, 670, 675, 679, 684, 
689, 694, 699, 704, 709, 714, 718, 723, 
728, 733, 738, 744, 749, 754, 759, 764, 
769, 774, 779, 785, 790, 795, 800, 806, 
811, 816, 822, 827, 832, 838, 843, 849, 
854, 860, 865, 871, 876, 882, 888, 893, 
899, 904, 910, 916, 922, 927, 933, 939, 
945, 951, 956, 962, 968, 974, 980, 986, 
992, 998, 1004, 1010, 1016, 1022, 1028, 1035, 
1041, 1047, 1053, 1059, 1066, 1072, 1078, 1085, 
1091, 1097, 1104, 1110, 1116, 1123, 1129, 1136, 
1142, 1149, 1156, 1162, 1169, 1175, 1182, 1189, 
1195, 1202, 1209, 1216, 1222, 1229, 1236, 1243, 
1250, 1257, 1264, 1271, 1278, 1285, 1292, 1299, 
1306, 1313, 1320, 1327, 1334, 1342, 1349, 1356, 
1363, 1371, 1378, 1385, 1393, 1400, 1407, 1415, 
1422, 1430, 1437, 1445, 1452, 1460, 1467, 1475, 
1483, 1490, 1498, 1506, 1514, 1521, 1529, 1537, 
1545, 1553, 1561, 1569, 1576, 1584, 1592, 1600, 
1608, 1617, 1625, 1633, 1641, 1649, 1657, 1665, 
1674, 1682, 1690, 1699, 1707, 1715, 1724, 1732, 
1741, 1749, 1758, 1766, 1775, 1783, 1792, 1800, 
1809, 1818, 1826, 1835, 1844, 1853, 1862, 1870, 
1879, 1888, 1897, 1906, 1915, 1924, 1933, 1942, 
1951, 1960, 1969, 1978, 1988, 1997, 2006, 2015, 
2025, 2034, 2043, 2053, 2062, 2071, 2081, 2090, 
2100, 2109, 2119, 2129, 2138, 2148, 2157, 2167, 
2177, 2187, 2196, 2206, 2216, 2226, 2236, 2246, 
2256, 2265, 2275, 2285, 2296, 2306, 2316, 2326, 
2336, 2346, 2356, 2367, 2377, 2387, 2398, 2408, 
2418, 2429, 2439, 2450, 2460, 2471, 2481, 2492, 
2502, 2513, 2524, 2534, 2545, 2556, 2567, 2577, 
2588, 2599, 2610, 2621, 2632, 2643, 2654, 2665, 
2676, 2687, 2698, 2709, 2720, 2732, 2743, 2754, 
2765, 2777, 2788, 2799, 2811, 2822, 2834, 2845, 
2857, 2868, 2880, 2891, 2903, 2915, 2927, 2938, 
2950, 2962, 2974, 2985, 2997, 3009, 3021, 3033, 
3045, 3057, 3069, 3081, 3093, 3106, 3118, 3130, 
3142, 3154, 3167, 3179, 3191, 3204, 3216, 3229, 
3241, 3254, 3266, 3279, 3291, 3304, 3317, 3329, 
3342, 3355, 3368, 3380, 3393, 3406, 3419, 3432, 
3445, 3458, 3471, 3484, 3497, 3510, 3523, 3536, 
3550, 3563, 3576, 3589, 3603, 3616, 3630, 3643, 
3656, 3670, 3683, 3697, 3711, 3724, 3738, 3751, 
3765, 3779, 3793, 3806, 3820, 3834, 3848, 3862, 
3876, 3890, 3904, 3918, 3932, 3946, 3960, 3974, 
3989, 4003, 4017, 4031, 4046, 4060, 4074, 4089, 
4103, 4118, 4132, 4147, 4161, 4176, 4191, 4205, 
4220, 4235, 4249, 4264, 4279, 4294, 4309, 4324, 
4339, 4354, 4369, 4384, 4399, 4414, 4429, 4444, 
4459, 4475, 4490, 4505, 4521, 4536, 4551, 4567, 
4582, 4598, 4613, 4629, 4644, 4660, 4676, 4691, 
4707, 4723, 4739, 4754, 4770, 4786, 4802, 4818, 
4834, 4850, 4866, 4882, 4898, 4914, 4931, 4947, 
4963, 4979, 4996, 5012, 5028, 5045, 5061, 5077, 
5094, 5110, 5127, 5144, 5160, 5177, 5194, 5210, 
5227, 5244, 5261, 5277, 5294, 5311, 5328, 5345, 
5362, 5379, 5396, 5413, 5430, 5448, 5465, 5482, 
5499, 5517, 5534, 5551, 5569, 5586, 5604, 5621, 
5639, 5656, 5674, 5691, 5709, 5727, 5744, 5762, 
5780, 5798, 5815, 5833, 5851, 5869, 5887, 5905, 
5923, 5941, 5959, 5977, 5996, 6014, 6032, 6050, 
6069, 6087, 6105, 6124, 6142, 6161, 6179, 6198, 
6216, 6235, 6253, 6272, 6291, 6309, 6328, 6347, 
6366, 6384, 6403, 6422, 6441, 6460, 6479, 6498, 
6517, 6536, 6555, 6575, 6594, 6613, 6632, 6651, 
6671, 6690, 6709, 6729, 6748, 6768, 6787, 6807, 
6826, 6846, 6866, 6885, 6905, 6925, 6944, 6964, 
6984, 7004, 7024, 7044, 7064, 7084, 7104, 7124, 
7144, 7164, 7184, 7204, 7224, 7245, 7265, 7285, 
7305, 7326, 7346, 7367, 7387, 7408, 7428, 7449, 
7469, 7490, 7510, 7531, 7552, 7572, 7593, 7614, 
7635, 7656, 7677, 7698, 7718, 7739, 7760, 7781, 
7803, 7824, 7845, 7866, 7887, 7908, 7930, 7951, 
7972, 7994, 8015, 8036, 8058, 8079, 8101, 8122, 
8144, 8165, 8187, 8209, 8230, 8252, 8274, 8296, 
8317, 8339, 8361, 8383, 8405, 8427, 8449, 8471, 
8493, 8515, 8537, 8559, 8581, 8603, 8626, 8648, 
8670, 8693, 8715, 8737, 8760, 8782, 8804, 8827, 
8849, 8872, 8895, 8917, 8940, 8962, 8985, 9008, 
9031, 9053, 9076, 9099, 9122, 9145, 9168, 9191, 
9214, 9237, 9260, 9283, 9306, 9329, 9352, 9375, 
9398, 9422, 9445, 9468, 9492, 9515, 9538, 9562, 
9585, 9609, 9632, 9656, 9679, 9703, 9726, 9750, 
9774, 9797, 9821, 9845, 9868, 9892, 9916, 9940, 
9964, 9988, 10012, 10035, 10059, 10083, 10108, 10132, 
10156, 10180, 10204, 10228, 10252, 10276, 10301, 10325, 
10349, 10374, 10398, 10422, 10447, 10471, 10496, 10520, 
10545, 10569, 10594, 10618, 10643, 10668, 10692, 10717, 
10742, 10766, 10791, 10816, 10841, 10866, 10891, 10915, 
10940, 10965, 10990, 11015, 11040, 11065, 11090, 11115, 

11141, 11166, 11191, 11216, 11241, 11267, 11292, 11317, 
11342, 11368, 11393, 11419, 11444, 11469, 11495, 11520, 
11546, 11571, 11597, 11623, 11648, 11674, 11699, 11725, 
11751, 11776, 11802, 11828, 11854, 11880, 11905, 11931, 
11957, 11983, 12009, 12035, 12061, 12087, 12113, 12139, 
12165, 12191, 12217, 12243, 12269, 12296, 12322, 12348, 
12374, 12401, 12427, 12453, 12479, 12506, 12532, 12559, 
12585, 12611, 12638, 12664, 12691, 12717, 12744, 12770, 
12797, 12823, 12850, 12877, 12903, 12930, 12957, 12983, 
13010, 13037, 13064, 13091, 13117, 13144, 13171, 13198, 
13225, 13252, 13279, 13306, 13333, 13359, 13386, 13414, 
13441, 13468, 13495, 13522, 13549, 13576, 13603, 13630, 
13658, 13685, 13712, 13739, 13766, 13794, 13821, 13848, 
13876, 13903, 13930, 13958, 13985, 14013, 14040, 14067, 
14095, 14122, 14150, 14177, 14205, 14232, 14260, 14288, 
14315, 14343, 14370, 14398, 14426, 14453, 14481, 14509, 
14537, 14564, 14592, 14620, 14648, 14675, 14703, 14731, 
14759, 14787, 14815, 14842, 14870, 14898, 14926, 14954, 
14982, 15010, 15038, 15066, 15094, 15122, 15150, 15178, 
15206, 15234, 15262, 15290, 15319, 15347, 15375, 15403, 
15431, 15459, 15488, 15516, 15544, 15572, 15600, 15629, 
15657, 15685, 15713, 15742, 15770, 15798, 15827, 15855, 
15883, 15912, 15940, 15969, 15997, 16025, 16054, 16082, 
16111, 16139, 16167, 16196, 16224, 16253, 16281, 16310, 
16338, 16367, 16395, 16424, 16453, 16481, 16510, 16538, 
16567, 16595, 16624, 16653, 16681, 16710, 16739, 16767, 
16796, 16825, 16853, 16882, 16911, 16939, 16968, 16997, 
17025, 17054, 17083, 17112, 17140, 17169, 17198, 17227, 
17255, 17284, 17313, 17342, 17370, 17399, 17428, 17457, 
17486, 17514, 17543, 17572, 17601, 17630, 17659, 17687, 
17716, 17745, 17774, 17803, 17832, 17861, 17889, 17918, 
17947, 17976, 18005, 18034, 18063, 18092, 18120, 18149, 
18178, 18207, 18236, 18265, 18294, 18323, 18352, 18381, 
18410, 18439, 18467, 18496, 18525, 18554, 18583, 18612, 
18641, 18670, 18699, 18728, 18757, 18786, 18815, 18844, 
18873, 18902, 18930, 18959, 18988, 19017, 19046, 19075, 
19104, 19133, 19162, 19191, 19220, 19249, 19278, 19307, 
19336, 19364, 19393, 19422, 19451, 19480, 19509, 19538, 
19567, 19596, 19625, 19654, 19683, 19711, 19740, 19769, 
19798, 19827, 19856, 19885, 19914, 19942, 19971, 20000, 
20029, 20058, 20087, 20116, 20144, 20173, 20202, 20231, 
20260, 20289, 20317, 20346, 20375, 20404, 20432, 20461, 
20490, 20519, 20548, 20576, 20605, 20634, 20662, 20691, 
20720, 20749, 20777, 20806, 20835, 20863, 20892, 20921, 
20949, 20978, 21007, 21035, 21064, 21093, 21121, 21150, 
21178, 21207, 21235, 21264, 21293, 21321, 21350, 21378, 
21407, 21435, 21464, 21492, 21521, 21549, 21577, 21606, 
21634, 21663, 21691, 21720, 21748, 21776, 21805, 21833, 
21861, 21890, 21918, 21946, 21975, 22003, 22031, 22059, 
22088, 22116, 22144, 22172, 22200, 22229, 22257, 22285, 
22313, 22341, 22369, 22397, 22425, 22453, 22481, 22509, 
22537, 22565, 22593, 22621, 22649, 22677, 22705, 22733, 
22761, 22789, 22817, 22845, 22872, 22900, 22928, 22956, 
22984, 23011, 23039, 23067, 23094, 23122, 23150, 23177, 
23205, 23233, 23260, 23288, 23315, 23343, 23370, 23398, 
23425, 23453, 23480, 23508, 23535, 23563, 23590, 23617, 
23645, 23672, 23699, 23726, 23754, 23781, 23808, 23835, 
23862, 23890, 23917, 23944, 23971, 23998, 24025, 24052, 
24079, 24106, 24133, 24160, 24187, 24214, 24241, 24267, 
24294, 24321, 24348, 24375, 24401, 24428, 24455, 24481, 
24508, 24535, 24561, 24588, 24614, 24641, 24667, 24694, 
24720, 24747, 24773, 24799, 24826, 24852, 24878, 24905, 
24931, 24957, 24983, 25009, 25036, 25062, 25088, 25114, 
25140, 25166, 25192, 25218, 25244, 25270, 25296, 25321, 
25347, 25373, 25399, 25425, 25450, 25476, 25502, 25527, 
25553, 25579, 25604, 25630, 25655, 25681, 25706, 25731, 
25757, 25782, 25807, 25833, 25858, 25883, 25908, 25934, 
25959, 25984, 26009, 26034, 26059, 26084, 26109, 26134, 
26159, 26184, 26208, 26233, 26258, 26283, 26307, 26332, 
26357, 26381, 26406, 26431, 26455, 26480, 26504, 26528, 
26553, 26577, 26601, 26626, 26650, 26674, 26698, 26723, 
26747, 26771, 26795, 26819, 26843, 26867, 26891, 26915, 
26938, 26962, 26986, 27010, 27034, 27057, 27081, 27104, 
27128, 27152, 27175, 27199, 27222, 27245, 27269, 27292, 
27315, 27339, 27362, 27385, 27408, 27431, 27454, 27477, 
27500, 27523, 27546, 27569, 27592, 27615, 27637, 27660, 
27683, 27705, 27728, 27751, 27773, 27796, 27818, 27841, 
27863, 27885, 27908, 27930, 27952, 27974, 27996, 28018, 
28041, 28063, 28085, 28106, 28128, 28150, 28172, 28194, 
28216, 28237, 28259, 28281, 28302, 28324, 28345, 28367, 
28388, 28409, 28431, 28452, 28473, 28494, 28516, 28537, 
28558, 28579, 28600, 28621, 28642, 28663, 28683, 28704, 
28725, 28746, 28766, 28787, 28807, 28828, 28848, 28869, 
28889, 28910, 28930, 28950, 28970, 28991, 29011, 29031, 
29051, 29071, 29091, 29111, 29131, 29150, 29170, 29190, 
29209, 29229, 29249, 29268, 29288, 29307, 29327, 29346, 
29365, 29385, 29404, 29423, 29442, 29461, 29480, 29499, 
29518, 29537, 29556, 29575, 29593, 29612, 29631, 29649, 
29668, 29686, 29705, 29723, 29742, 29760, 29778, 29796, 
29815, 29833, 29851, 29869, 29887, 29905, 29923, 29940, 
29958, 29976, 29994, 30011, 30029, 30046, 30064, 30081, 
30099, 30116, 30133, 30151, 30168, 30185, 30202, 30219, 
30236, 30253, 30270, 30287, 30303, 30320, 30337, 30354, 
30370, 30387, 30403, 30420, 30436, 30452, 30469, 30485, 
30501, 30517, 30533, 30549, 30565, 30581, 30597, 30613, 
30628, 30644, 30660, 30675, 30691, 30706, 30722, 30737, 
30753, 30768, 30783, 30798, 30813, 30828, 30843, 30858, 
30873, 30888, 30903, 30918, 30932, 30947, 30962, 30976, 
30991, 31005, 31019, 31034, 31048, 31062, 31076, 31090, 
31104, 31118, 31132, 31146, 31160, 31174, 31187, 31201, 
31215, 31228, 31242, 31255, 31269, 31282, 31295, 31308, 
31321, 31335, 31348, 31361, 31374, 31386, 31399, 31412, 
31425, 31437, 31450, 31462, 31475, 31487, 31500, 31512, 
31524, 31536, 31549, 31561, 31573, 31585, 31597, 31608, 
31620, 31632, 31644, 31655, 31667, 31678, 31690, 31701, 
31712, 31724, 31735, 31746, 31757, 31768, 31779, 31790, 
31801, 31812, 31823, 31833, 31844, 31855, 31865, 31875, 
31886, 31896, 31907, 31917, 31927, 31937, 31947, 31957, 
31967, 31977, 31987, 31996, 32006, 32016, 32025, 32035, 
32044, 32054, 32063, 32072, 32081, 32091, 32100, 32109, 
32118, 32127, 32135, 32144, 32153, 32162, 32170, 32179, 
32187, 32196, 32204, 32212, 32221, 32229, 32237, 32245, 
32253, 32261, 32269, 32277, 32285, 32292, 32300, 32308, 
32315, 32323, 32330, 32337, 32345, 32352, 32359, 32366, 
32373, 32380, 32387, 32394, 32401, 32407, 32414, 32421, 
32427, 32434, 32440, 32446, 32453, 32459, 32465, 32471, 
32477, 32483, 32489, 32495, 32501, 32507, 32512, 32518, 
32523, 32529, 32534, 32540, 32545, 32550, 32556, 32561, 
32566, 32571, 32576, 32581, 32585, 32590, 32595, 32599, 
32604, 32608, 32613, 32617, 32622, 32626, 32630, 32634, 
32638, 32642, 32646, 32650, 32654, 32658, 32661, 32665, 
32668, 32672, 32675, 32679, 32682, 32685, 32689, 32692, 
32695, 32698, 32701, 32704, 32706, 32709, 32712, 32714, 
32717, 32719, 32722, 32724, 32727, 32729, 32731, 32733, 
32735, 32737, 32739, 32741, 32743, 32744, 32746, 32748, 
32749, 32751, 32752, 32754, 32755, 32756, 32757, 32758, 
32759, 32760, 32761, 32762, 32763, 32764, 32764, 32765, 
32765, 32766, 32766, 32767, 32767, 32767, 32767, 32767, 

/*32767, 32767, 32767, 32767, 32767, 32767, 32766, 32766, 
32765, 32765, 32764, 32764, 32763, 32762, 32761, 32760, 
32759, 32758, 32757, 32756, 32755, 32754, 32752, 32751, 
32749, 32748, 32746, 32744, 32743, 32741, 32739, 32737, 
32735, 32733, 32731, 32729, 32727, 32724, 32722, 32719, 
32717, 32714, 32712, 32709, 32706, 32704, 32701, 32698, 
32695, 32692, 32689, 32685, 32682, 32679, 32675, 32672, 
32668, 32665, 32661, 32658, 32654, 32650, 32646, 32642, 
32638, 32634, 32630, 32626, 32622, 32617, 32613, 32608, 
32604, 32599, 32595, 32590, 32585, 32581, 32576, 32571, 
32566, 32561, 32556, 32550, 32545, 32540, 32534, 32529, 
32523, 32518, 32512, 32507, 32501, 32495, 32489, 32483, 
32477, 32471, 32465, 32459, 32453, 32446, 32440, 32434, 
32427, 32421, 32414, 32407, 32401, 32394, 32387, 32380, 
32373, 32366, 32359, 32352, 32345, 32337, 32330, 32323, 
32315, 32308, 32300, 32292, 32285, 32277, 32269, 32261, 
32253, 32245, 32237, 32229, 32221, 32212, 32204, 32196, 
32187, 32179, 32170, 32162, 32153, 32144, 32135, 32127, 
32118, 32109, 32100, 32091, 32081, 32072, 32063, 32054, 
32044, 32035, 32025, 32016, 32006, 31996, 31987, 31977, 
31967, 31957, 31947, 31937, 31927, 31917, 31907, 31896, 
31886, 31875, 31865, 31855, 31844, 31833, 31823, 31812, 
31801, 31790, 31779, 31768, 31757, 31746, 31735, 31724, 
31712, 31701, 31690, 31678, 31667, 31655, 31644, 31632, 
31620, 31608, 31597, 31585, 31573, 31561, 31549, 31536, 
31524, 31512, 31500, 31487, 31475, 31462, 31450, 31437, 
31425, 31412, 31399, 31386, 31374, 31361, 31348, 31335, 
31321, 31308, 31295, 31282, 31269, 31255, 31242, 31228, 
31215, 31201, 31187, 31174, 31160, 31146, 31132, 31118, 
31104, 31090, 31076, 31062, 31048, 31034, 31019, 31005, 
30991, 30976, 30962, 30947, 30932, 30918, 30903, 30888, 
30873, 30858, 30843, 30828, 30813, 30798, 30783, 30768, 
30753, 30737, 30722, 30706, 30691, 30675, 30660, 30644, 
30628, 30613, 30597, 30581, 30565, 30549, 30533, 30517, 
30501, 30485, 30469, 30452, 30436, 30420, 30403, 30387, 
30370, 30354, 30337, 30320, 30303, 30287, 30270, 30253, 
30236, 30219, 30202, 30185, 30168, 30151, 30133, 30116, 
30099, 30081, 30064, 30046, 30029, 30011, 29994, 29976, 
29958, 29940, 29923, 29905, 29887, 29869, 29851, 29833, 
29815, 29796, 29778, 29760, 29742, 29723, 29705, 29686, 
29668, 29649, 29631, 29612, 29593, 29575, 29556, 29537, 
29518, 29499, 29480, 29461, 29442, 29423, 29404, 29385, 
29365, 29346, 29327, 29307, 29288, 29268, 29249, 29229, 
29209, 29190, 29170, 29150, 29131, 29111, 29091, 29071, 
29051, 29031, 29011, 28991, 28970, 28950, 28930, 28910, 
28889, 28869, 28848, 28828, 28807, 28787, 28766, 28746, 
28725, 28704, 28683, 28663, 28642, 28621, 28600, 28579, 
28558, 28537, 28516, 28494, 28473, 28452, 28431, 28409, 
28388, 28367, 28345, 28324, 28302, 28281, 28259, 28237, 
28216, 28194, 28172, 28150, 28128, 28106, 28085, 28063, 
28041, 28018, 27996, 27974, 27952, 27930, 27908, 27885, 
27863, 27841, 27818, 27796, 27773, 27751, 27728, 27705, 
27683, 27660, 27637, 27615, 27592, 27569, 27546, 27523, 
27500, 27477, 27454, 27431, 27408, 27385, 27362, 27339, 
27315, 27292, 27269, 27245, 27222, 27199, 27175, 27152, 
27128, 27104, 27081, 27057, 27034, 27010, 26986, 26962, 
26938, 26915, 26891, 26867, 26843, 26819, 26795, 26771, 
26747, 26723, 26698, 26674, 26650, 26626, 26601, 26577, 
26553, 26528, 26504, 26480, 26455, 26431, 26406, 26381, 
26357, 26332, 26307, 26283, 26258, 26233, 26208, 26184, 
26159, 26134, 26109, 26084, 26059, 26034, 26009, 25984, 
25959, 25934, 25908, 25883, 25858, 25833, 25807, 25782, 
25757, 25731, 25706, 25681, 25655, 25630, 25604, 25579, 
25553, 25527, 25502, 25476, 25450, 25425, 25399, 25373, 
25347, 25321, 25296, 25270, 25244, 25218, 25192, 25166, 
25140, 25114, 25088, 25062, 25036, 25009, 24983, 24957, 
24931, 24905, 24878, 24852, 24826, 24799, 24773, 24747, 
24720, 24694, 24667, 24641, 24614, 24588, 24561, 24535, 
24508, 24481, 24455, 24428, 24401, 24375, 24348, 24321, 
24294, 24267, 24241, 24214, 24187, 24160, 24133, 24106, 
24079, 24052, 24025, 23998, 23971, 23944, 23917, 23890, 
23862, 23835, 23808, 23781, 23754, 23726, 23699, 23672, 
23645, 23617, 23590, 23563, 23535, 23508, 23480, 23453, 
23425, 23398, 23370, 23343, 23315, 23288, 23260, 23233, 
23205, 23177, 23150, 23122, 23094, 23067, 23039, 23011, 
22984, 22956, 22928, 22900, 22872, 22845, 22817, 22789, 
22761, 22733, 22705, 22677, 22649, 22621, 22593, 22565, 
22537, 22509, 22481, 22453, 22425, 22397, 22369, 22341, 
22313, 22285, 22257, 22229, 22200, 22172, 22144, 22116, 
22088, 22059, 22031, 22003, 21975, 21946, 21918, 21890, 
21861, 21833, 21805, 21776, 21748, 21720, 21691, 21663, 
21634, 21606, 21577, 21549, 21521, 21492, 21464, 21435, 
21407, 21378, 21350, 21321, 21293, 21264, 21235, 21207, 
21178, 21150, 21121, 21093, 21064, 21035, 21007, 20978, 
20949, 20921, 20892, 20863, 20835, 20806, 20777, 20749, 
20720, 20691, 20662, 20634, 20605, 20576, 20548, 20519, 
20490, 20461, 20432, 20404, 20375, 20346, 20317, 20289, 
20260, 20231, 20202, 20173, 20144, 20116, 20087, 20058, 
20029, 20000, 19971, 19942, 19914, 19885, 19856, 19827, 
19798, 19769, 19740, 19711, 19683, 19654, 19625, 19596, 
19567, 19538, 19509, 19480, 19451, 19422, 19393, 19364, 
19336, 19307, 19278, 19249, 19220, 19191, 19162, 19133, 
19104, 19075, 19046, 19017, 18988, 18959, 18930, 18902, 
18873, 18844, 18815, 18786, 18757, 18728, 18699, 18670, 
18641, 18612, 18583, 18554, 18525, 18496, 18467, 18439, 
18410, 18381, 18352, 18323, 18294, 18265, 18236, 18207, 
18178, 18149, 18120, 18092, 18063, 18034, 18005, 17976, 
17947, 17918, 17889, 17861, 17832, 17803, 17774, 17745, 
17716, 17687, 17659, 17630, 17601, 17572, 17543, 17514, 
17486, 17457, 17428, 17399, 17370, 17342, 17313, 17284, 
17255, 17227, 17198, 17169, 17140, 17112, 17083, 17054, 
17025, 16997, 16968, 16939, 16911, 16882, 16853, 16825, 
16796, 16767, 16739, 16710, 16681, 16653, 16624, 16595, 
16567, 16538, 16510, 16481, 16453, 16424, 16395, 16367, 
16338, 16310, 16281, 16253, 16224, 16196, 16167, 16139, 
16111, 16082, 16054, 16025, 15997, 15969, 15940, 15912, 
15883, 15855, 15827, 15798, 15770, 15742, 15713, 15685, 
15657, 15629, 15600, 15572, 15544, 15516, 15488, 15459, 
15431, 15403, 15375, 15347, 15319, 15290, 15262, 15234, 
15206, 15178, 15150, 15122, 15094, 15066, 15038, 15010, 
14982, 14954, 14926, 14898, 14870, 14842, 14815, 14787, 
14759, 14731, 14703, 14675, 14648, 14620, 14592, 14564, 
14537, 14509, 14481, 14453, 14426, 14398, 14370, 14343, 
14315, 14288, 14260, 14232, 14205, 14177, 14150, 14122, 
14095, 14067, 14040, 14013, 13985, 13958, 13930, 13903, 
13876, 13848, 13821, 13794, 13766, 13739, 13712, 13685, 
13658, 13630, 13603, 13576, 13549, 13522, 13495, 13468, 
13441, 13414, 13386, 13359, 13333, 13306, 13279, 13252, 
13225, 13198, 13171, 13144, 13117, 13091, 13064, 13037, 
13010, 12983, 12957, 12930, 12903, 12877, 12850, 12823, 
12797, 12770, 12744, 12717, 12691, 12664, 12638, 12611, 
12585, 12559, 12532, 12506, 12479, 12453, 12427, 12401, 
12374, 12348, 12322, 12296, 12269, 12243, 12217, 12191, 
12165, 12139, 12113, 12087, 12061, 12035, 12009, 11983, 
11957, 11931, 11905, 11880, 11854, 11828, 11802, 11776, 
11751, 11725, 11699, 11674, 11648, 11623, 11597, 11571, 
11546, 11520, 11495, 11469, 11444, 11419, 11393, 11368, 
11342, 11317, 11292, 11267, 11241, 11216, 11191, 11166, 

11141, 11115, 11090, 11065, 11040, 11015, 10990, 10965, 
10940, 10915, 10891, 10866, 10841, 10816, 10791, 10766, 
10742, 10717, 10692, 10668, 10643, 10618, 10594, 10569, 
10545, 10520, 10496, 10471, 10447, 10422, 10398, 10374, 
10349, 10325, 10301, 10276, 10252, 10228, 10204, 10180, 
10156, 10132, 10108, 10083, 10059, 10035, 10012, 9988, 
9964, 9940, 9916, 9892, 9868, 9845, 9821, 9797, 
9774, 9750, 9726, 9703, 9679, 9656, 9632, 9609, 
9585, 9562, 9538, 9515, 9492, 9468, 9445, 9422, 
9398, 9375, 9352, 9329, 9306, 9283, 9260, 9237, 
9214, 9191, 9168, 9145, 9122, 9099, 9076, 9053, 
9031, 9008, 8985, 8962, 8940, 8917, 8895, 8872, 
8849, 8827, 8804, 8782, 8760, 8737, 8715, 8693, 
8670, 8648, 8626, 8603, 8581, 8559, 8537, 8515, 
8493, 8471, 8449, 8427, 8405, 8383, 8361, 8339, 
8317, 8296, 8274, 8252, 8230, 8209, 8187, 8165, 
8144, 8122, 8101, 8079, 8058, 8036, 8015, 7994, 
7972, 7951, 7930, 7908, 7887, 7866, 7845, 7824, 
7803, 7781, 7760, 7739, 7718, 7698, 7677, 7656, 
7635, 7614, 7593, 7572, 7552, 7531, 7510, 7490, 
7469, 7449, 7428, 7408, 7387, 7367, 7346, 7326, 
7305, 7285, 7265, 7245, 7224, 7204, 7184, 7164, 
7144, 7124, 7104, 7084, 7064, 7044, 7024, 7004, 
6984, 6964, 6944, 6925, 6905, 6885, 6866, 6846, 
6826, 6807, 6787, 6768, 6748, 6729, 6709, 6690, 
6671, 6651, 6632, 6613, 6594, 6575, 6555, 6536, 
6517, 6498, 6479, 6460, 6441, 6422, 6403, 6384, 
6366, 6347, 6328, 6309, 6291, 6272, 6253, 6235, 
6216, 6198, 6179, 6161, 6142, 6124, 6105, 6087, 
6069, 6050, 6032, 6014, 5996, 5977, 5959, 5941, 
5923, 5905, 5887, 5869, 5851, 5833, 5815, 5798, 
5780, 5762, 5744, 5727, 5709, 5691, 5674, 5656, 
5639, 5621, 5604, 5586, 5569, 5551, 5534, 5517, 
5499, 5482, 5465, 5448, 5430, 5413, 5396, 5379, 
5362, 5345, 5328, 5311, 5294, 5277, 5261, 5244, 
5227, 5210, 5194, 5177, 5160, 5144, 5127, 5110, 
5094, 5077, 5061, 5045, 5028, 5012, 4996, 4979, 
4963, 4947, 4931, 4914, 4898, 4882, 4866, 4850, 
4834, 4818, 4802, 4786, 4770, 4754, 4739, 4723, 
4707, 4691, 4676, 4660, 4644, 4629, 4613, 4598, 
4582, 4567, 4551, 4536, 4521, 4505, 4490, 4475, 
4459, 4444, 4429, 4414, 4399, 4384, 4369, 4354, 
4339, 4324, 4309, 4294, 4279, 4264, 4249, 4235, 
4220, 4205, 4191, 4176, 4161, 4147, 4132, 4118, 
4103, 4089, 4074, 4060, 4046, 4031, 4017, 4003, 
3989, 3974, 3960, 3946, 3932, 3918, 3904, 3890, 
3876, 3862, 3848, 3834, 3820, 3806, 3793, 3779, 
3765, 3751, 3738, 3724, 3711, 3697, 3683, 3670, 
3656, 3643, 3630, 3616, 3603, 3589, 3576, 3563, 
3550, 3536, 3523, 3510, 3497, 3484, 3471, 3458, 
3445, 3432, 3419, 3406, 3393, 3380, 3368, 3355, 
3342, 3329, 3317, 3304, 3291, 3279, 3266, 3254, 
3241, 3229, 3216, 3204, 3191, 3179, 3167, 3154, 
3142, 3130, 3118, 3106, 3093, 3081, 3069, 3057, 
3045, 3033, 3021, 3009, 2997, 2985, 2974, 2962, 
2950, 2938, 2927, 2915, 2903, 2891, 2880, 2868, 
2857, 2845, 2834, 2822, 2811, 2799, 2788, 2777, 
2765, 2754, 2743, 2732, 2720, 2709, 2698, 2687, 
2676, 2665, 2654, 2643, 2632, 2621, 2610, 2599, 
2588, 2577, 2567, 2556, 2545, 2534, 2524, 2513, 
2502, 2492, 2481, 2471, 2460, 2450, 2439, 2429, 
2418, 2408, 2398, 2387, 2377, 2367, 2356, 2346, 
2336, 2326, 2316, 2306, 2296, 2285, 2275, 2265, 
2256, 2246, 2236, 2226, 2216, 2206, 2196, 2187, 
2177, 2167, 2157, 2148, 2138, 2129, 2119, 2109, 
2100, 2090, 2081, 2071, 2062, 2053, 2043, 2034, 
2025, 2015, 2006, 1997, 1988, 1978, 1969, 1960, 
1951, 1942, 1933, 1924, 1915, 1906, 1897, 1888, 
1879, 1870, 1862, 1853, 1844, 1835, 1826, 1818, 
1809, 1800, 1792, 1783, 1775, 1766, 1758, 1749, 
1741, 1732, 1724, 1715, 1707, 1699, 1690, 1682, 
1674, 1665, 1657, 1649, 1641, 1633, 1625, 1617, 
1608, 1600, 1592, 1584, 1576, 1569, 1561, 1553, 
1545, 1537, 1529, 1521, 1514, 1506, 1498, 1490, 
1483, 1475, 1467, 1460, 1452, 1445, 1437, 1430, 
1422, 1415, 1407, 1400, 1393, 1385, 1378, 1371, 
1363, 1356, 1349, 1342, 1334, 1327, 1320, 1313, 
1306, 1299, 1292, 1285, 1278, 1271, 1264, 1257, 
1250, 1243, 1236, 1229, 1222, 1216, 1209, 1202, 
1195, 1189, 1182, 1175, 1169, 1162, 1156, 1149, 
1142, 1136, 1129, 1123, 1116, 1110, 1104, 1097, 
1091, 1085, 1078, 1072, 1066, 1059, 1053, 1047, 
1041, 1035, 1028, 1022, 1016, 1010, 1004, 998, 
992, 986, 980, 974, 968, 962, 956, 951, 
945, 939, 933, 927, 922, 916, 910, 904, 
899, 893, 888, 882, 876, 871, 865, 860, 
854, 849, 843, 838, 832, 827, 822, 816, 
811, 806, 800, 795, 790, 785, 779, 774, 
769, 764, 759, 754, 749, 744, 738, 733, 
728, 723, 718, 714, 709, 704, 699, 694, 
689, 684, 679, 675, 670, 665, 660, 656, 
651, 646, 642, 637, 632, 628, 623, 619, 
614, 610, 605, 601, 596, 592, 587, 583, 
579, 574, 570, 565, 561, 557, 553, 548, 
544, 540, 536, 532, 527, 523, 519, 515, 
511, 507, 503, 499, 495, 491, 487, 483, 
479, 475, 471, 467, 463, 459, 456, 452, 
448, 444, 440, 437, 433, 429, 426, 422, 
418, 415, 411, 407, 404, 400, 397, 393, 
390, 386, 383, 379, 376, 372, 369, 366, 
362, 359, 356, 352, 349, 346, 342, 339, 
336, 333, 329, 326, 323, 320, 317, 314, 
311, 307, 304, 301, 298, 295, 292, 289, 
286, 283, 280, 278, 275, 272, 269, 266, 
263, 260, 258, 255, 252, 249, 247, 244, 
241, 238, 236, 233, 230, 228, 225, 223, 
220, 217, 215, 212, 210, 207, 205, 202, 
200, 198, 195, 193, 190, 188, 186, 183, 
181, 179, 176, 174, 172, 170, 167, 165, 
163, 161, 159, 156, 154, 152, 150, 148, 
146, 144, 142, 140, 138, 136, 134, 132, 
130, 128, 126, 124, 122, 120, 118, 117, 
115, 113, 111, 109, 108, 106, 104, 102, 
101, 99, 97, 96, 94, 92, 91, 89, 
87, 86, 84, 83, 81, 80, 78, 77, 
75, 74, 72, 71, 69, 68, 67, 65, 
64, 63, 61, 60, 59, 57, 56, 55, 
54, 52, 51, 50, 49, 48, 46, 45, 
44, 43, 42, 41, 40, 39, 38, 37, 
36, 35, 34, 33, 32, 31, 30, 29, 
28, 27, 26, 25, 25, 24, 23, 22, 
21, 21, 20, 19, 18, 18, 17, 16, 
16, 15, 14, 14, 13, 12, 12, 11, 
11, 10, 10, 9, 9, 8, 8, 7, 
7, 6, 6, 5, 5, 5, 4, 4, 
3, 3, 3, 3, 2, 2, 2, 2, 
1, 1, 1, 1, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, */
};

static int apply_window(int16_t *data, int m, const int16_t *window)
{
  if (m < 1 || m > LOG2_N_WAVE) {
    return -1;
  }

  int half = 1 << (m - 1);
  int w_step = 1 << (LOG2_N_WAVE - m);

  int size = half;
  const int16_t *w_ptr = &window[w_step - 1];

  while (size-- > 0) {
    *data = FIX_MPY(*data, *w_ptr);
    data++;
    w_ptr += w_step;
  }

  size = half;
  w_ptr = &window[N_WAVE / 2 - 1];

  while (size-- > 0) {
    *data = FIX_MPY(*data, *w_ptr);
    data++;
    w_ptr -= w_step;
  }

  return 0;
}

// функция окна блэкмана
int apply_blackman_window(int16_t *data, int m) {
  return apply_window(data, m, blackman_window);
}

void ADC_Handler() {
  int adc_isr = ADC->ADC_ISR;
  
  if (adc_isr & ADC_ISR_ENDRX) {
    // заполнен очередной буфер, передаём контоллеру доступа следующий буфер

    int next_buf_index = (i_buf_index + 2) % BUFFER_COUNT;
    
    if (next_buf_index != o_buf_index) {
      // В кольцевом буфере есть место под новый "next" блок данных.
      // Продвигаем указатель.
      i_buf_index = (i_buf_index + 1) % BUFFER_COUNT;
    }
    else {
      // Переполнение кольцевого буфера.
      // "next" блок данных будет отброшен и заполнен заново.
      // i_buf_index не меняется.
      next_buf_index = (i_buf_index + 1) % BUFFER_COUNT;
    }
    
    ADC->ADC_RNPR = (uint32_t) buffer[next_buf_index];
    ADC->ADC_RNCR = BUFFER_SIZE;
  }
}

int16_t *get_adc_buffer() {
  while (o_buf_index == i_buf_index);
  
  return buffer[o_buf_index];
}

// процедуа полученеия свободного буфера
void free_adc_buffer() {
  if (o_buf_index != i_buf_index) {
    o_buf_index = (o_buf_index + 1) % BUFFER_COUNT;
  }
}

// функция извлечения квадратного корня из числа с фиксированной точкой
int16_t sqrt_i(int16_t x) {
 int16_t a, b;
 int32_t xdp = ((int32_t) x) << 16;

 a = 0;
 b = INT16_MAX;

  while (b - a > 1) {
    int16_t m = (a + b) / 2;
    int32_t sq = (((int32_t) m) * m) << 1;

    if (sq > xdp) {
      b = m;
    }
    else {
      a = m;
    }
  }

  if (abs(((((int32_t) a) * a) << 1) - xdp) < abs(((((int32_t) b) * b) << 1) - xdp)) {
    return a;
  }
  else {
    return b;
  }
}

/* функция расчёта значения x. Возвращает: 
  min_value, когда x < min_value;
  max_value, когда x > max_value
  в потивном случае x
*/
inline int limit(int x, int min_value, int max_value) {
  if (x < min_value) {
    return min_value;
  }
  else if (x > max_value) {
    return max_value;
  }
  
  return x;
}

// поиск индекса максимума в массиве x[size]
size_t max_array_element(const int16_t *x, size_t size) {
  int16_t max_value = x[0];
  size_t max_index = 0;
  
  for (size_t i = 0; i < size; i++) {
    if (x[i] > max_value) {
      max_value = x[i];
      max_index = i;
    }
  }
  
  return max_index;
}

void word_to_bytes(uint16_t val, byte& high, byte& low) {
  high = (val >> 8) & 0xff;
  low = val & 0xff;
}

void write_word(uint16_t value) {
  byte high, low;
  word_to_bytes(value, high, low);
  Serial.write(high);
  Serial.write(low);  
}

void write_data(const band_data_t* data, int data_size) {
  for (int i = 0; i < data_size; i++) {
    write_word(data[i].band_count);
    write_word(data[i].level);
  }
}

void write_packet(const band_data_t* data, int data_size, /*int low_freq_count,*/ uint16_t max_level, uint16_t peak_index, uint16_t log_base, uint16_t sample_freq, uint16_t n_wave) {
  write_word(0xffff); // флаг начала пакета
  write_word(max_level); // передача значения максимальной амплитуды
  write_word(peak_index); // передача индекса с максимальной амплитудой
  write_word(log_base); // передача значения логарифма для отображения нужного числа полос
  write_word(sample_freq); // передача частоты, соответствующей одной полосе
  write_word(n_wave); //
  //write_word(low_freq_count);
  write_word(data_size);  // передача размеров структуры амплитуд и кол-ва выборок по полосе
  write_data(data, data_size); // передача структуры с апмплитудой и кол-вом выборок, размером data_size
  write_word(0x0000); // флаг конца пакета
}

void reverse(band_data_t* data, int size) {
  for (int i = 0, j = size - 1; i < j; i++, j--) {
    band_data_t tmp = data[i];
    data[i] = data[j];
    data[j] = tmp;
  }
}

void setup() {
  Serial.begin(115200); // Устанавливает скорость порта на 115200 Бод
  Serial.setTimeout(30000);  
  
  i_buf_index = o_buf_index = 0; // начальные установки АЦП
  
  adc_init(ADC, SystemCoreClock, ADC_FREQ_MIN, ADC_STARTUP_NORM); // инициализация АЦП ADC_FREQ_MIN = 1000000 (1 MHz)
  adc_configure_timing(ADC, 0, ADC_SETTLING_TIME_3, 1); // 23 periods ADC_FREQ per 1 conversion (43478.26 Hz)
  adc_configure_trigger(ADC, ADC_TRIG_SW, 1);
  adc_disable_interrupt(ADC, 0xFFFFFFFF);
  adc_disable_all_channel(ADC); // запрет АЦП на всех каналах
  
  adc_enable_channel(ADC, ADC_CHANNEL_7); // разрешение АЦП на 7 канале МК (А0)
  
  adc_enable_interrupt(ADC, ADC_IER_ENDRX); // разрешаем прерывание по готовности буфера прямого доступа в память
  
  // инициализиуем прямой доступ в память
  ADC->ADC_RPR = (uint32_t) buffer[0]; 
  ADC->ADC_RCR = BUFFER_SIZE;
  ADC->ADC_RNPR = (uint32_t) buffer[1];
  ADC->ADC_RNCR = BUFFER_SIZE;
  ADC->ADC_PTCR = ADC_PTCR_RXTEN; // разрешаем прямой доступ в память
  
  NVIC_EnableIRQ(ADC_IRQn); // разрешение прерывания от АЦП в контроллере прерываний
  
  adc_start(ADC); // запуск АЦП
  
  // калибровка  
  // заполняем и чистим буфер информации - заряжаем конденсатор АЦП для последующего вычисления постоянной составляюей
  for(int i = 0; i < CALIBRATION_DUMMY_LOOPS; i++) {
    get_adc_buffer();
    free_adc_buffer();
  }
  
  // вычисляем постоянную составляющую сигнала
  int32_t sum = 0;
  
  for(int i = 0; i < CALIBRATION_WORK_LOOPS; i++) {
    int16_t *data = get_adc_buffer();
    for(int j = 0; j < BUFFER_SIZE; j++) { 
      sum += data[j];
    }
    
    free_adc_buffer();
  }
  
  dc_level = sum / (CALIBRATION_WORK_LOOPS * BUFFER_SIZE);
  
  pinMode(OVERLOAD_LED, OUTPUT);
  digitalWrite(OVERLOAD_LED, 0);
}
void loop() {
  int16_t *data = get_adc_buffer(); // получаем данные преобазования от АЦП в массив data

#ifdef LOOP_TIME    
  unsigned long time0 = micros();
#endif
  
  // счётчики уровней сигнала
  int16_t level_counters[NUM_LEVEL_COUNTERS];
  
  // устанавливаем все счётчики в ноль
  memset(level_counters, 0, sizeof(level_counters));
  
  for (int i = 0; i < BUFFER_SIZE; i++) {  
    data[i] = ((data[i] - dc_level) << 4);
    int16_t level_counter_index = data[i] / ((UINT16_MAX + 1) / NUM_LEVEL_COUNTERS) + NUM_LEVEL_COUNTERS / 2;
    level_counters[level_counter_index]++;    
  }
  
  int min_level_counter_index;
  int max_level_counter_index;
  
  for (min_level_counter_index = 0; min_level_counter_index < NUM_LEVEL_COUNTERS && level_counters[min_level_counter_index] == 0; min_level_counter_index++)
    ;  
  
  for (max_level_counter_index = NUM_LEVEL_COUNTERS - 1; max_level_counter_index > min_level_counter_index && level_counters[max_level_counter_index] == 0; max_level_counter_index--)
    ;
  
  int is_overload = 0;
  
  if (max_level_counter_index - min_level_counter_index > MIN_OVERLOAD_DETECTION_LEVEL) {
    int16_t level_counters_max = 0;
  
    for (int i = 0; i < 4; i++) {
      int max_index = max_array_element(level_counters, NUM_LEVEL_COUNTERS);
      level_counters_max += level_counters[max_index];
      level_counters[max_index] = 0;
    }
    
    if (BUFFER_SIZE / level_counters_max < OVERLOAD_DETECTION_THRESHOLD) {
      is_overload = 1;
    }
  }
  
  //Перегрузка      
  digitalWrite(OVERLOAD_LED, is_overload);

#ifdef APPLY_WINDOW  
  apply_blackman_window(data, LOG2_N_WAVE); // накладываем окно Блэкмана
#endif

  for (int i = 0; i < N_WAVE; i++) {
    im[i] = 0;
  }

  fix_fft(data, im, LOG2_N_WAVE, 0); // выполняем преобразование Фурье
  
  for (int i = 1; i < N_WAVE / 2; i++) {
    data[i] = FIX_MPY(data[i], data[i]) + FIX_MPY(im[i], im[i]);
  }
  
  int16_t peak_index = 0, peak_value = 1;
  
  for (int i = 1; i < N_WAVE / 2; i++) {
    if (data[i] > peak_value) {
      peak_index = i;
      peak_value = data[i];
    }
  }
  
  band_data_t out[N_WAVE];
  int data_index = N_WAVE / 2 - 1;
  int out_index = 0;
  int16_t data_size = N_WAVE / 2 - 1;
  
  while (data_index > 0) {
    int16_t count = FIX_MPY(data_size, OUTPUT_LOG_BASE_FIX);
    
    if (count == 0) {
      count = 1;
    }
    
    out[out_index].band_count = count;
    
    int16_t next_data_size = data_size - count;
    int16_t sum = 0;
    
    while (data_index > 0 && count > 0) {
       sum += data[data_index--];
       count--;
    }
    
    out[out_index++].level = sqrt_i(sum);
    
    data_size = next_data_size; 
  }
  
  reverse(out, out_index);
  
  write_packet(out, out_index, INT16_MAX / 10, peak_index, OUTPUT_LOG_BASE_FIX, SAMPLE_FREQ, N_WAVE);
  
  free_adc_buffer();

#ifdef LOOP_TIME    
  unsigned long time1 = micros();
  
  Serial.println();
  Serial.print("loop time: ");
  Serial.print(time1 - time0);
  Serial.println(" us");
#endif

  process_command();
}
