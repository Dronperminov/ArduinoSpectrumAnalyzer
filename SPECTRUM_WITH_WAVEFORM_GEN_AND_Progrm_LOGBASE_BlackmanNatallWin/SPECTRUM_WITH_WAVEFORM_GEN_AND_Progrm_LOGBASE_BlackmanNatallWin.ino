#include "Arduino.h"
#include <OneDAC.h>

// magic - don't work without it
#if 0
;
#endif

// полная длина входных значений
#define N_WAVE  4096
// значение двоичного логарифма от N_WAVE
#define LOG2_N_WAVE 12

// частота выборок, определённая экспериментальным путём
#define SAMPLE_FREQ 47620

// размер одного буфера
#define BUFFER_SIZE 4096
// кол-во буферов для DMA
#define BUFFER_COUNT 4 

// размер передаваемых данных на анализатор спектра
#define DATA_SIZE 2048

// накладывать ли окно на входные данные перед преобразованием Фурье
#define APPLY_WINDOW

// основане логарифма выходной шкалы частот спектроанализатора
// OUTPUT_LOG_BASE = (N_WAVE / 2) ^ (1 / N_OUTPUT), где N_OUTPUT - кол-во выходных полос
// для N_OUTPUT = 116, OUTPUT_LOG_BASE = 1.05
// для N_OUTPUT = 64, OUTPUT_LOG_BASE = 1.105
// для N_OUTPUT = 40, OUTPUT_LOG_BASE = 1.19
// для N_OUTPUT = 11, OUTPUT_LOG_BASE = 2
// для N_OUTPUT = 8, OUTPUT_LOG_BASE = 3
// для N_OUTPUT = 6, OUTPUT_LOG_BASE = 5 
// для N_OUTPUT = 3, OUTPUT_LOG_BASE = 16
float OUTPUT_LOG_BASE = 1.058;

// основание логарифма в представлении с фиксированной точкой
#define OUTPUT_LOG_BASE_FIX ((int16_t) ((int32_t) (INT16_MAX + 1) * (1.0 - 1.0 / OUTPUT_LOG_BASE)))

 // кол-во пропущенных циклов при калибровке
#define CALIBRATION_DUMMY_LOOPS 30
 // кол-во используемых циклов в вычислении среднего  при калибровке
#define CALIBRATION_WORK_LOOPS 30

// чувствительность к перегрузке по уровню
//#define OVERLOAD_TOLERANCE 200 
 // чувствительность к перегрузке по кол-ву выборок
#define OVERLOAD_DETECTION_THRESHOLD 5
// минимальное кол-во уровней, при котором включается алгоритм обнаружения перегрузки [1; NUM_LEVEL_COUNTERS]
#define MIN_OVERLOAD_DETECTION_LEVEL 128

#define NUM_LEVEL_COUNTERS 256

#if (UINT16_MAX + 1) % NUM_LEVEL_COUNTERS != 0
#  error 65536 должно нацело делиться на NUM_LEVEL_COUNTERS 
#endif

#define OVERLOAD_LED 13
#define POWER_LED 2
#define DAC_LED 21


#define DAC_FREQ (VARIANT_MCK / 8)

#define DAC_BUFFER_SIZE 4096
#define DAC_MIN_BUFFER_SIZE 16

#define DAC_VALUE_MIN 0
#define DAC_VALUE_MAX 4095

#define DAC_MIN_RATIO 7
#define DAC_MAX_RATIO 1024

#define CMD_NONE 0
#define CMD_NOOP 1
#define CMD_SIN 2
#define CMD_SQUARE 3
#define CMD_TRIANGLE 4
#define CMD_SAW 5
#define CMD_STOP 6
#define CMD_HARMONIC 7
#define CMD_LOG_BASE 8
#define CMD_UNKNOWN (-1)

uint16_t dac_buffer[DAC_BUFFER_SIZE];

uint32_t dac_buffer_data_size;

volatile int i_buf_index, o_buf_index; // индексы буферов

int16_t buffer[BUFFER_COUNT][BUFFER_SIZE]; // буфер для внутренней памяти

int16_t dc_level; // уровень постоянной составляющей

int16_t im[N_WAVE]; // массив im

typedef struct {
  int16_t band_count;
  int16_t level;
} band_data_t;


// логическая процедура для расчёта размера буфера в зависимости от частоты сигнала
bool calculate_dac_buffer(uint freq, uint& dac_ratio, uint& buffer_size) {
  for (uint ratio = DAC_MIN_RATIO; ratio < DAC_MAX_RATIO; ratio++) {
    uint sample_freq = DAC_FREQ / ratio;
    uint buf_size = sample_freq / freq + (sample_freq % freq < (freq / 2) ? 0 : 1);
    
    if (buf_size < DAC_MIN_BUFFER_SIZE) {
      return false;
    }
    
    if (buf_size <= DAC_BUFFER_SIZE) {
      dac_ratio = ratio;
      buffer_size = buf_size;
      
      return true;
    }
  }
  
  return false;
}

// процедура заполнения буфера прямоугольнообразным сигналом
void fill_dac_buffer_square(uint16_t* buffer, uint buffer_size) {  
  for (int i = 0; i < buffer_size / 2; i++) {
    uint16_t value = DAC_VALUE_MAX;
    
    buffer[i] = value;
  }
  
  for (int i = buffer_size / 2; i < buffer_size; i++) {
    uint16_t value = DAC_VALUE_MIN;
    
    buffer[i] = value;
  }  
}

// процедура заполнения буфера синусоидальным сигналом
void fill_dac_buffer_sin(uint16_t* buffer, uint buffer_size) { 
  int16_t offset = (DAC_VALUE_MAX - DAC_VALUE_MIN + 1) / 2;
  
  for (int i = 0; i < buffer_size; i++) {    
    int16_t value = (int16_t) (round(sin(2 * M_PI * (float)i / buffer_size) * offset) + offset);
    
    if (value > DAC_VALUE_MAX) {
      value = DAC_VALUE_MAX;
    }
    
    buffer[i] = value;
  } 
}

// процедура заполнения буфера гармоническим сигналом
void fill_dac_buffer_harmonic(uint16_t* buffer, uint buffer_size) { 
  int16_t offset = (DAC_VALUE_MAX - DAC_VALUE_MIN + 1) / 2;
  
  for (int i = 0; i < buffer_size; i++) { 
    int16_t value = (int16_t) ((round(0.8 * sin(2 * M_PI * (float)i / buffer_size) * offset) + offset) + round(0.5 * sin(4 * M_PI * (float)i / buffer_size) * offset) + offset);
    
    if (value > DAC_VALUE_MAX) {
      value = DAC_VALUE_MAX;
    }
    
    buffer[i] = value;
  } 
}

// процедура заполнения массива значениями для формирования пилообразного сигнала
void fill_dac_buffer_saw(uint16_t* buffer, uint buffer_size) { 
  for (int i = 0; i < buffer_size; i++) {
    uint16_t value = map(i, 0, buffer_size, DAC_VALUE_MIN, DAC_VALUE_MAX);
    
    buffer[i] = value;
  }
}

// процедура заполнения массива значениями для формирования треугольного сигнала
void fill_dac_buffer_triangle(uint16_t* buffer, uint buffer_size) { 
  for (int i = 0; i < buffer_size / 2; i++) {
    uint16_t value = map(i, 0, buffer_size / 2, DAC_VALUE_MIN, DAC_VALUE_MAX);
    
    buffer[i] = value;
  }
 
  for (int i = buffer_size / 2; i < buffer_size; i++) {
    uint16_t value = map(i, buffer_size, buffer_size / 2, DAC_VALUE_MIN, DAC_VALUE_MAX);
    
    buffer[i] = value;
  }   
}

void fill_dac_buffer(int cmd, uint16_t* buffer, uint buffer_size) {
  switch (cmd) {
    case CMD_SIN:
      fill_dac_buffer_sin(buffer, buffer_size);
      break;
    
    case CMD_TRIANGLE:
      fill_dac_buffer_triangle(buffer, buffer_size);
      break;
      
    case CMD_SQUARE:
      fill_dac_buffer_square(buffer, buffer_size);
      break;
      
    case CMD_SAW:
      fill_dac_buffer_saw(buffer, buffer_size);
      break;
      
    case CMD_HARMONIC:
      fill_dac_buffer_harmonic(buffer, buffer_size);
      break;
  }
}

void on_dac_transmit_end(void *) {
  OneDAC.queueBuffer(dac_buffer, dac_buffer_data_size);
}

void start_dac(uint dac_ratio, uint32_t buffer_size) {
  dac_buffer_data_size = buffer_size;
  
  OneDAC.begin(dac_ratio * (VARIANT_MCK / DAC_FREQ));
  
  OneDAC.setOnTransmitEnd_CB(on_dac_transmit_end, NULL);
  
  OneDAC.queueBuffer(dac_buffer, dac_buffer_data_size);
  OneDAC.queueBuffer(dac_buffer, dac_buffer_data_size);
}

void stop_dac() {
  OneDAC.end();
}

int read_command(uint &freq) {
  if (!Serial.available()) {
    return CMD_NONE;
  }
  
  char buf[128];
  
  int n = Serial.readBytesUntil('\n', buf, sizeof(buf) - 1);
  
  buf[n] = '\0';
  
  if (strcmp(buf, "") == 0) {
    return CMD_NONE;
  }
  
  char cmd[128];
  
  sscanf(buf, "%s %d", &cmd, &freq);  
  
  if (strcmp(cmd, "sin") == 0) {
    return CMD_SIN;
  } 
  else if (strcmp(cmd, "square") == 0) {
    return CMD_SQUARE;
  }
  else if (strcmp(cmd, "triangle") == 0) {
    return CMD_TRIANGLE;
  }
  else if (strcmp(cmd, "saw") == 0) {
    return CMD_SAW;
  }
  else if (strcmp(cmd, "harmonic") == 0) {
    return CMD_HARMONIC;
  }
  else if (strcmp(cmd, "stop") == 0) {
    return CMD_STOP;
  }
  else if (strcmp(cmd, "noop") == 0) {
    return CMD_NOOP;
  }
  else if (strcmp(cmd, "log_base") == 0) {
    sscanf(buf, "%s %f", &cmd, &OUTPUT_LOG_BASE);
    return CMD_LOG_BASE;
  }
  else {
    return CMD_UNKNOWN;
  }
}

void process_command() {
  uint freq;
  uint dac_ratio, buffer_size;
  
  int cmd = read_command(freq);
  
  switch (cmd) {
    case CMD_NONE:
    case CMD_NOOP:
    case CMD_UNKNOWN:
      return;
      
    case CMD_STOP:
      stop_dac();
      digitalWrite(DAC_LED, 1);
      return;
      
    default:
      // Do nothing, continue.
      break;
  }
  
  if (calculate_dac_buffer(freq, dac_ratio, buffer_size)) {
    stop_dac();
    
    fill_dac_buffer(cmd, dac_buffer, buffer_size);
    
    start_dac(dac_ratio, buffer_size);
    
    digitalWrite(DAC_LED, 0);
  }
}

// Since we only use 3/4 of N_WAVE, we define only this many samples, in order to conserve data space.
const int16_t Sinewave[N_WAVE-N_WAVE/4] = {
  0, 50, 101, 151, 201, 251, 302, 352, 
  402, 452, 503, 553, 603, 653, 704, 754, 
  804, 854, 905, 955, 1005, 1055, 1106, 1156, 
  1206, 1256, 1307, 1357, 1407, 1457, 1507, 1558, 
  1608, 1658, 1708, 1758, 1809, 1859, 1909, 1959, 
  2009, 2060, 2110, 2160, 2210, 2260, 2310, 2360, 
  2411, 2461, 2511, 2561, 2611, 2661, 2711, 2761, 
  2811, 2861, 2912, 2962, 3012, 3062, 3112, 3162, 
  3212, 3262, 3312, 3362, 3412, 3462, 3512, 3562, 
  3612, 3662, 3712, 3762, 3812, 3861, 3911, 3961, 
  4011, 4061, 4111, 4161, 4211, 4260, 4310, 4360, 
  4410, 4460, 4510, 4559, 4609, 4659, 4709, 4758, 
  4808, 4858, 4907, 4957, 5007, 5057, 5106, 5156, 
  5205, 5255, 5305, 5354, 5404, 5453, 5503, 5553, 
  5602, 5652, 5701, 5751, 5800, 5850, 5899, 5948, 
  5998, 6047, 6097, 6146, 6195, 6245, 6294, 6343, 
  6393, 6442, 6491, 6541, 6590, 6639, 6688, 6737, 
  6787, 6836, 6885, 6934, 6983, 7032, 7081, 7130, 
  7180, 7229, 7278, 7327, 7376, 7425, 7473, 7522, 
  7571, 7620, 7669, 7718, 7767, 7816, 7864, 7913, 
  7962, 8011, 8059, 8108, 8157, 8206, 8254, 8303, 
  8351, 8400, 8449, 8497, 8546, 8594, 8643, 8691, 
  8740, 8788, 8836, 8885, 8933, 8982, 9030, 9078, 
  9127, 9175, 9223, 9271, 9319, 9368, 9416, 9464, 
  9512, 9560, 9608, 9656, 9704, 9752, 9800, 9848, 
  9896, 9944, 9992, 10040, 10088, 10135, 10183, 10231, 
  10279, 10326, 10374, 10422, 10469, 10517, 10565, 10612, 
  10660, 10707, 10755, 10802, 10850, 10897, 10945, 10992, 
  11039, 11087, 11134, 11181, 11228, 11276, 11323, 11370, 
  11417, 11464, 11511, 11558, 11605, 11652, 11699, 11746, 
  11793, 11840, 11887, 11934, 11980, 12027, 12074, 12121, 
  12167, 12214, 12261, 12307, 12354, 12400, 12447, 12493, 
  12540, 12586, 12633, 12679, 12725, 12772, 12818, 12864, 
  12910, 12957, 13003, 13049, 13095, 13141, 13187, 13233, 
  13279, 13325, 13371, 13417, 13463, 13508, 13554, 13600, 
  13646, 13691, 13737, 13783, 13828, 13874, 13919, 13965, 
  14010, 14056, 14101, 14146, 14192, 14237, 14282, 14327, 
  14373, 14418, 14463, 14508, 14553, 14598, 14643, 14688, 
  14733, 14778, 14823, 14867, 14912, 14957, 15002, 15046, 
  15091, 15136, 15180, 15225, 15269, 15314, 15358, 15402, 
  15447, 15491, 15535, 15580, 15624, 15668, 15712, 15756, 
  15800, 15844, 15888, 15932, 15976, 16020, 16064, 16108, 
  16151, 16195, 16239, 16282, 16326, 16369, 16413, 16456, 
  16500, 16543, 16587, 16630, 16673, 16717, 16760, 16803, 
  16846, 16889, 16932, 16975, 17018, 17061, 17104, 17147, 
  17190, 17233, 17275, 17318, 17361, 17403, 17446, 17488, 
  17531, 17573, 17616, 17658, 17700, 17743, 17785, 17827, 
  17869, 17911, 17953, 17995, 18037, 18079, 18121, 18163, 
  18205, 18247, 18288, 18330, 18372, 18413, 18455, 18496, 
  18538, 18579, 18621, 18662, 18703, 18745, 18786, 18827, 
  18868, 18909, 18950, 18991, 19032, 19073, 19114, 19155, 
  19195, 19236, 19277, 19317, 19358, 19399, 19439, 19479, 
  19520, 19560, 19601, 19641, 19681, 19721, 19761, 19801, 
  19841, 19881, 19921, 19961, 20001, 20041, 20081, 20120, 
  20160, 20200, 20239, 20279, 20318, 20357, 20397, 20436, 
  20475, 20515, 20554, 20593, 20632, 20671, 20710, 20749, 
  20788, 20827, 20865, 20904, 20943, 20981, 21020, 21059, 
  21097, 21136, 21174, 21212, 21251, 21289, 21327, 21365, 
  21403, 21441, 21479, 21517, 21555, 21593, 21631, 21668, 
  21706, 21744, 21781, 21819, 21856, 21894, 21931, 21968, 
  22006, 22043, 22080, 22117, 22154, 22191, 22228, 22265, 
  22302, 22339, 22375, 22412, 22449, 22485, 22522, 22558, 
  22595, 22631, 22668, 22704, 22740, 22776, 22812, 22848, 
  22884, 22920, 22956, 22992, 23028, 23064, 23099, 23135, 
  23170, 23206, 23241, 23277, 23312, 23348, 23383, 23418, 
  23453, 23488, 23523, 23558, 23593, 23628, 23663, 23697, 
  23732, 23767, 23801, 23836, 23870, 23905, 23939, 23973, 
  24008, 24042, 24076, 24110, 24144, 24178, 24212, 24246, 
  24279, 24313, 24347, 24380, 24414, 24448, 24481, 24514, 
  24548, 24581, 24614, 24647, 24680, 24713, 24746, 24779, 
  24812, 24845, 24878, 24910, 24943, 24976, 25008, 25041, 
  25073, 25105, 25138, 25170, 25202, 25234, 25266, 25298, 
  25330, 25362, 25394, 25425, 25457, 25489, 25520, 25552, 
  25583, 25615, 25646, 25677, 25708, 25739, 25771, 25802, 
  25833, 25863, 25894, 25925, 25956, 25986, 26017, 26048, 
  26078, 26108, 26139, 26169, 26199, 26229, 26259, 26290, 
  26320, 26349, 26379, 26409, 26439, 26468, 26498, 26528, 
  26557, 26586, 26616, 26645, 26674, 26704, 26733, 26762, 
  26791, 26820, 26848, 26877, 26906, 26935, 26963, 26992, 
  27020, 27049, 27077, 27105, 27133, 27162, 27190, 27218, 
  27246, 27273, 27301, 27329, 27357, 27384, 27412, 27440, 
  27467, 27494, 27522, 27549, 27576, 27603, 27630, 27657, 
  27684, 27711, 27738, 27765, 27791, 27818, 27844, 27871, 
  27897, 27924, 27950, 27976, 28002, 28028, 28054, 28080, 
  28106, 28132, 28158, 28183, 28209, 28234, 28260, 28285, 
  28311, 28336, 28361, 28386, 28411, 28436, 28461, 28486, 
  28511, 28536, 28560, 28585, 28610, 28634, 28658, 28683, 
  28707, 28731, 28755, 28779, 28803, 28827, 28851, 28875, 
  28899, 28922, 28946, 28970, 28993, 29016, 29040, 29063, 
  29086, 29109, 29132, 29155, 29178, 29201, 29224, 29247, 
  29269, 29292, 29314, 29337, 29359, 29381, 29404, 29426, 
  29448, 29470, 29492, 29514, 29535, 29557, 29579, 29600, 
  29622, 29643, 29665, 29686, 29707, 29729, 29750, 29771, 
  29792, 29813, 29833, 29854, 29875, 29895, 29916, 29936, 
  29957, 29977, 29997, 30018, 30038, 30058, 30078, 30098, 
  30118, 30137, 30157, 30177, 30196, 30216, 30235, 30254, 
  30274, 30293, 30312, 30331, 30350, 30369, 30388, 30407, 
  30425, 30444, 30462, 30481, 30499, 30518, 30536, 30554, 
  30572, 30590, 30608, 30626, 30644, 30662, 30680, 30697, 
  30715, 30732, 30750, 30767, 30784, 30801, 30819, 30836, 
  30853, 30869, 30886, 30903, 30920, 30936, 30953, 30969, 
  30986, 31002, 31018, 31034, 31050, 31067, 31082, 31098, 
  31114, 31130, 31146, 31161, 31177, 31192, 31207, 31223, 
  31238, 31253, 31268, 31283, 31298, 31313, 31328, 31342, 
  31357, 31372, 31386, 31400, 31415, 31429, 31443, 31457, 
  31471, 31485, 31499, 31513, 31527, 31540, 31554, 31568, 
  31581, 31594, 31608, 31621, 31634, 31647, 31660, 31673, 
  31686, 31699, 31711, 31724, 31737, 31749, 31761, 31774, 
  31786, 31798, 31810, 31822, 31834, 31846, 31858, 31870, 
  31881, 31893, 31904, 31916, 31927, 31938, 31950, 31961, 
  31972, 31983, 31994, 32005, 32015, 32026, 32037, 32047, 
  32058, 32068, 32078, 32088, 32099, 32109, 32119, 32129, 
  32138, 32148, 32158, 32167, 32177, 32186, 32196, 32205, 
  32214, 32224, 32233, 32242, 32251, 32259, 32268, 32277, 
  32286, 32294, 32303, 32311, 32319, 32328, 32336, 32344, 
  32352, 32360, 32368, 32376, 32383, 32391, 32398, 32406, 
  32413, 32421, 32428, 32435, 32442, 32449, 32456, 32463, 
  32470, 32477, 32483, 32490, 32496, 32503, 32509, 32515, 
  32522, 32528, 32534, 32540, 32546, 32551, 32557, 32563, 
  32568, 32574, 32579, 32585, 32590, 32595, 32600, 32605, 
  32610, 32615, 32620, 32625, 32629, 32634, 32638, 32643, 
  32647, 32651, 32656, 32660, 32664, 32668, 32672, 32675, 
  32679, 32683, 32686, 32690, 32693, 32697, 32700, 32703, 
  32706, 32709, 32712, 32715, 32718, 32721, 32723, 32726, 
  32729, 32731, 32733, 32736, 32738, 32740, 32742, 32744, 
  32746, 32748, 32749, 32751, 32753, 32754, 32756, 32757, 
  32758, 32759, 32760, 32761, 32762, 32763, 32764, 32765, 
  32766, 32766, 32767, 32767, 32767, 32767, 32767, 32767, 
  
  32767, 32767, 32767, 32767, 32767, 32767, 32767, 32766, 
  32766, 32765, 32764, 32763, 32762, 32761, 32760, 32759, 
  32758, 32757, 32756, 32754, 32753, 32751, 32749, 32748, 
  32746, 32744, 32742, 32740, 32738, 32736, 32733, 32731, 
  32729, 32726, 32723, 32721, 32718, 32715, 32712, 32709, 
  32706, 32703, 32700, 32697, 32693, 32690, 32686, 32683, 
  32679, 32675, 32672, 32668, 32664, 32660, 32656, 32651, 
  32647, 32643, 32638, 32634, 32629, 32625, 32620, 32615, 
  32610, 32605, 32600, 32595, 32590, 32585, 32579, 32574, 
  32568, 32563, 32557, 32551, 32546, 32540, 32534, 32528, 
  32522, 32515, 32509, 32503, 32496, 32490, 32483, 32477, 
  32470, 32463, 32456, 32449, 32442, 32435, 32428, 32421, 
  32413, 32406, 32398, 32391, 32383, 32376, 32368, 32360, 
  32352, 32344, 32336, 32328, 32319, 32311, 32303, 32294, 
  32286, 32277, 32268, 32259, 32251, 32242, 32233, 32224, 
  32214, 32205, 32196, 32186, 32177, 32167, 32158, 32148, 
  32138, 32129, 32119, 32109, 32099, 32088, 32078, 32068, 
  32058, 32047, 32037, 32026, 32015, 32005, 31994, 31983, 
  31972, 31961, 31950, 31938, 31927, 31916, 31904, 31893, 
  31881, 31870, 31858, 31846, 31834, 31822, 31810, 31798, 
  31786, 31774, 31761, 31749, 31737, 31724, 31711, 31699, 
  31686, 31673, 31660, 31647, 31634, 31621, 31608, 31594, 
  31581, 31568, 31554, 31540, 31527, 31513, 31499, 31485, 
  31471, 31457, 31443, 31429, 31415, 31400, 31386, 31372, 
  31357, 31342, 31328, 31313, 31298, 31283, 31268, 31253, 
  31238, 31223, 31207, 31192, 31177, 31161, 31146, 31130, 
  31114, 31098, 31082, 31067, 31050, 31034, 31018, 31002, 
  30986, 30969, 30953, 30936, 30920, 30903, 30886, 30869, 
  30853, 30836, 30819, 30801, 30784, 30767, 30750, 30732, 
  30715, 30697, 30680, 30662, 30644, 30626, 30608, 30590, 
  30572, 30554, 30536, 30518, 30499, 30481, 30462, 30444, 
  30425, 30407, 30388, 30369, 30350, 30331, 30312, 30293, 
  30274, 30254, 30235, 30216, 30196, 30177, 30157, 30137, 
  30118, 30098, 30078, 30058, 30038, 30018, 29997, 29977, 
  29957, 29936, 29916, 29895, 29875, 29854, 29833, 29813, 
  29792, 29771, 29750, 29729, 29707, 29686, 29665, 29643, 
  29622, 29600, 29579, 29557, 29535, 29514, 29492, 29470, 
  29448, 29426, 29404, 29381, 29359, 29337, 29314, 29292, 
  29269, 29247, 29224, 29201, 29178, 29155, 29132, 29109, 
  29086, 29063, 29040, 29016, 28993, 28970, 28946, 28922, 
  28899, 28875, 28851, 28827, 28803, 28779, 28755, 28731, 
  28707, 28683, 28658, 28634, 28610, 28585, 28560, 28536, 
  28511, 28486, 28461, 28436, 28411, 28386, 28361, 28336, 
  28311, 28285, 28260, 28234, 28209, 28183, 28158, 28132, 
  28106, 28080, 28054, 28028, 28002, 27976, 27950, 27924, 
  27897, 27871, 27844, 27818, 27791, 27765, 27738, 27711, 
  27684, 27657, 27630, 27603, 27576, 27549, 27522, 27494, 
  27467, 27440, 27412, 27384, 27357, 27329, 27301, 27273, 
  27246, 27218, 27190, 27162, 27133, 27105, 27077, 27049, 
  27020, 26992, 26963, 26935, 26906, 26877, 26848, 26820, 
  26791, 26762, 26733, 26704, 26674, 26645, 26616, 26586, 
  26557, 26528, 26498, 26468, 26439, 26409, 26379, 26349, 
  26320, 26290, 26259, 26229, 26199, 26169, 26139, 26108, 
  26078, 26048, 26017, 25986, 25956, 25925, 25894, 25863, 
  25833, 25802, 25771, 25739, 25708, 25677, 25646, 25615, 
  25583, 25552, 25520, 25489, 25457, 25425, 25394, 25362, 
  25330, 25298, 25266, 25234, 25202, 25170, 25138, 25105, 
  25073, 25041, 25008, 24976, 24943, 24910, 24878, 24845, 
  24812, 24779, 24746, 24713, 24680, 24647, 24614, 24581, 
  24548, 24514, 24481, 24448, 24414, 24380, 24347, 24313, 
  24279, 24246, 24212, 24178, 24144, 24110, 24076, 24042, 
  24008, 23973, 23939, 23905, 23870, 23836, 23801, 23767, 
  23732, 23697, 23663, 23628, 23593, 23558, 23523, 23488, 
  23453, 23418, 23383, 23348, 23312, 23277, 23241, 23206, 
  23170, 23135, 23099, 23064, 23028, 22992, 22956, 22920, 
  22884, 22848, 22812, 22776, 22740, 22704, 22668, 22631, 
  22595, 22558, 22522, 22485, 22449, 22412, 22375, 22339, 
  22302, 22265, 22228, 22191, 22154, 22117, 22080, 22043, 
  22006, 21968, 21931, 21894, 21856, 21819, 21781, 21744, 
  21706, 21668, 21631, 21593, 21555, 21517, 21479, 21441, 
  21403, 21365, 21327, 21289, 21251, 21212, 21174, 21136, 
  21097, 21059, 21020, 20981, 20943, 20904, 20865, 20827, 
  20788, 20749, 20710, 20671, 20632, 20593, 20554, 20515, 
  20475, 20436, 20397, 20357, 20318, 20279, 20239, 20200, 
  20160, 20120, 20081, 20041, 20001, 19961, 19921, 19881, 
  19841, 19801, 19761, 19721, 19681, 19641, 19601, 19560, 
  19520, 19479, 19439, 19399, 19358, 19317, 19277, 19236, 
  19195, 19155, 19114, 19073, 19032, 18991, 18950, 18909, 
  18868, 18827, 18786, 18745, 18703, 18662, 18621, 18579, 
  18538, 18496, 18455, 18413, 18372, 18330, 18288, 18247, 
  18205, 18163, 18121, 18079, 18037, 17995, 17953, 17911, 
  17869, 17827, 17785, 17743, 17700, 17658, 17616, 17573, 
  17531, 17488, 17446, 17403, 17361, 17318, 17275, 17233, 
  17190, 17147, 17104, 17061, 17018, 16975, 16932, 16889, 
  16846, 16803, 16760, 16717, 16673, 16630, 16587, 16543, 
  16500, 16456, 16413, 16369, 16326, 16282, 16239, 16195, 
  16151, 16108, 16064, 16020, 15976, 15932, 15888, 15844, 
  15800, 15756, 15712, 15668, 15624, 15580, 15535, 15491, 
  15447, 15402, 15358, 15314, 15269, 15225, 15180, 15136, 
  15091, 15046, 15002, 14957, 14912, 14867, 14823, 14778, 
  14733, 14688, 14643, 14598, 14553, 14508, 14463, 14418, 
  14373, 14327, 14282, 14237, 14192, 14146, 14101, 14056, 
  14010, 13965, 13919, 13874, 13828, 13783, 13737, 13691, 
  13646, 13600, 13554, 13508, 13463, 13417, 13371, 13325, 
  13279, 13233, 13187, 13141, 13095, 13049, 13003, 12957, 
  12910, 12864, 12818, 12772, 12725, 12679, 12633, 12586, 
  12540, 12493, 12447, 12400, 12354, 12307, 12261, 12214, 
  12167, 12121, 12074, 12027, 11980, 11934, 11887, 11840, 
  11793, 11746, 11699, 11652, 11605, 11558, 11511, 11464, 
  11417, 11370, 11323, 11276, 11228, 11181, 11134, 11087, 
  11039, 10992, 10945, 10897, 10850, 10802, 10755, 10707, 
  10660, 10612, 10565, 10517, 10469, 10422, 10374, 10326, 
  10279, 10231, 10183, 10135, 10088, 10040, 9992, 9944, 
  9896, 9848, 9800, 9752, 9704, 9656, 9608, 9560, 
  9512, 9464, 9416, 9368, 9319, 9271, 9223, 9175, 
  9127, 9078, 9030, 8982, 8933, 8885, 8836, 8788, 
  8740, 8691, 8643, 8594, 8546, 8497, 8449, 8400, 
  8351, 8303, 8254, 8206, 8157, 8108, 8059, 8011, 
  7962, 7913, 7864, 7816, 7767, 7718, 7669, 7620, 
  7571, 7522, 7473, 7425, 7376, 7327, 7278, 7229, 
  7180, 7130, 7081, 7032, 6983, 6934, 6885, 6836, 
  6787, 6737, 6688, 6639, 6590, 6541, 6491, 6442, 
  6393, 6343, 6294, 6245, 6195, 6146, 6097, 6047, 
  5998, 5948, 5899, 5850, 5800, 5751, 5701, 5652, 
  5602, 5553, 5503, 5453, 5404, 5354, 5305, 5255, 
  5205, 5156, 5106, 5057, 5007, 4957, 4907, 4858, 
  4808, 4758, 4709, 4659, 4609, 4559, 4510, 4460, 
  4410, 4360, 4310, 4260, 4211, 4161, 4111, 4061, 
  4011, 3961, 3911, 3861, 3812, 3762, 3712, 3662, 
  3612, 3562, 3512, 3462, 3412, 3362, 3312, 3262, 
  3212, 3162, 3112, 3062, 3012, 2962, 2912, 2861, 
  2811, 2761, 2711, 2661, 2611, 2561, 2511, 2461, 
  2411, 2360, 2310, 2260, 2210, 2160, 2110, 2060, 
  2009, 1959, 1909, 1859, 1809, 1758, 1708, 1658, 
  1608, 1558, 1507, 1457, 1407, 1357, 1307, 1256, 
  1206, 1156, 1106, 1055, 1005, 955, 905, 854, 
  804, 754, 704, 653, 603, 553, 503, 452, 
  402, 352, 302, 251, 201, 151, 101, 50, 
  
  0, -50, -101, -151, -201, -251, -302, -352, 
  -402, -452, -503, -553, -603, -653, -704, -754, 
  -804, -854, -905, -955, -1005, -1055, -1106, -1156, 
  -1206, -1256, -1307, -1357, -1407, -1457, -1507, -1558, 
  -1608, -1658, -1708, -1758, -1809, -1859, -1909, -1959, 
  -2009, -2060, -2110, -2160, -2210, -2260, -2310, -2360, 
  -2411, -2461, -2511, -2561, -2611, -2661, -2711, -2761, 
  -2811, -2861, -2912, -2962, -3012, -3062, -3112, -3162, 
  -3212, -3262, -3312, -3362, -3412, -3462, -3512, -3562, 
  -3612, -3662, -3712, -3762, -3812, -3861, -3911, -3961, 
  -4011, -4061, -4111, -4161, -4211, -4260, -4310, -4360, 
  -4410, -4460, -4510, -4559, -4609, -4659, -4709, -4758, 
  -4808, -4858, -4907, -4957, -5007, -5057, -5106, -5156, 
  -5205, -5255, -5305, -5354, -5404, -5453, -5503, -5553, 
  -5602, -5652, -5701, -5751, -5800, -5850, -5899, -5948, 
  -5998, -6047, -6097, -6146, -6195, -6245, -6294, -6343, 
  -6393, -6442, -6491, -6541, -6590, -6639, -6688, -6737, 
  -6787, -6836, -6885, -6934, -6983, -7032, -7081, -7130, 
  -7180, -7229, -7278, -7327, -7376, -7425, -7473, -7522, 
  -7571, -7620, -7669, -7718, -7767, -7816, -7864, -7913, 
  -7962, -8011, -8059, -8108, -8157, -8206, -8254, -8303, 
  -8351, -8400, -8449, -8497, -8546, -8594, -8643, -8691, 
  -8740, -8788, -8836, -8885, -8933, -8982, -9030, -9078, 
  -9127, -9175, -9223, -9271, -9319, -9368, -9416, -9464, 
  -9512, -9560, -9608, -9656, -9704, -9752, -9800, -9848, 
  -9896, -9944, -9992, -10040, -10088, -10135, -10183, -10231, 
  -10279, -10326, -10374, -10422, -10469, -10517, -10565, -10612, 
  -10660, -10707, -10755, -10802, -10850, -10897, -10945, -10992, 
  -11039, -11087, -11134, -11181, -11228, -11276, -11323, -11370, 
  -11417, -11464, -11511, -11558, -11605, -11652, -11699, -11746, 
  -11793, -11840, -11887, -11934, -11980, -12027, -12074, -12121, 
  -12167, -12214, -12261, -12307, -12354, -12400, -12447, -12493, 
  -12540, -12586, -12633, -12679, -12725, -12772, -12818, -12864, 
  -12910, -12957, -13003, -13049, -13095, -13141, -13187, -13233, 
  -13279, -13325, -13371, -13417, -13463, -13508, -13554, -13600, 
  -13646, -13691, -13737, -13783, -13828, -13874, -13919, -13965, 
  -14010, -14056, -14101, -14146, -14192, -14237, -14282, -14327, 
  -14373, -14418, -14463, -14508, -14553, -14598, -14643, -14688, 
  -14733, -14778, -14823, -14867, -14912, -14957, -15002, -15046, 
  -15091, -15136, -15180, -15225, -15269, -15314, -15358, -15402, 
  -15447, -15491, -15535, -15580, -15624, -15668, -15712, -15756, 
  -15800, -15844, -15888, -15932, -15976, -16020, -16064, -16108, 
  -16151, -16195, -16239, -16282, -16326, -16369, -16413, -16456, 
  -16500, -16543, -16587, -16630, -16673, -16717, -16760, -16803, 
  -16846, -16889, -16932, -16975, -17018, -17061, -17104, -17147, 
  -17190, -17233, -17275, -17318, -17361, -17403, -17446, -17488, 
  -17531, -17573, -17616, -17658, -17700, -17743, -17785, -17827, 
  -17869, -17911, -17953, -17995, -18037, -18079, -18121, -18163, 
  -18205, -18247, -18288, -18330, -18372, -18413, -18455, -18496, 
  -18538, -18579, -18621, -18662, -18703, -18745, -18786, -18827, 
  -18868, -18909, -18950, -18991, -19032, -19073, -19114, -19155, 
  -19195, -19236, -19277, -19317, -19358, -19399, -19439, -19479, 
  -19520, -19560, -19601, -19641, -19681, -19721, -19761, -19801, 
  -19841, -19881, -19921, -19961, -20001, -20041, -20081, -20120, 
  -20160, -20200, -20239, -20279, -20318, -20357, -20397, -20436, 
  -20475, -20515, -20554, -20593, -20632, -20671, -20710, -20749, 
  -20788, -20827, -20865, -20904, -20943, -20981, -21020, -21059, 
  -21097, -21136, -21174, -21212, -21251, -21289, -21327, -21365, 
  -21403, -21441, -21479, -21517, -21555, -21593, -21631, -21668, 
  -21706, -21744, -21781, -21819, -21856, -21894, -21931, -21968, 
  -22006, -22043, -22080, -22117, -22154, -22191, -22228, -22265, 
  -22302, -22339, -22375, -22412, -22449, -22485, -22522, -22558, 
  -22595, -22631, -22668, -22704, -22740, -22776, -22812, -22848, 
  -22884, -22920, -22956, -22992, -23028, -23064, -23099, -23135, 
  -23170, -23206, -23241, -23277, -23312, -23348, -23383, -23418, 
  -23453, -23488, -23523, -23558, -23593, -23628, -23663, -23697, 
  -23732, -23767, -23801, -23836, -23870, -23905, -23939, -23973, 
  -24008, -24042, -24076, -24110, -24144, -24178, -24212, -24246, 
  -24279, -24313, -24347, -24380, -24414, -24448, -24481, -24514, 
  -24548, -24581, -24614, -24647, -24680, -24713, -24746, -24779, 
  -24812, -24845, -24878, -24910, -24943, -24976, -25008, -25041, 
  -25073, -25105, -25138, -25170, -25202, -25234, -25266, -25298, 
  -25330, -25362, -25394, -25425, -25457, -25489, -25520, -25552, 
  -25583, -25615, -25646, -25677, -25708, -25739, -25771, -25802, 
  -25833, -25863, -25894, -25925, -25956, -25986, -26017, -26048, 
  -26078, -26108, -26139, -26169, -26199, -26229, -26259, -26290, 
  -26320, -26349, -26379, -26409, -26439, -26468, -26498, -26528, 
  -26557, -26586, -26616, -26645, -26674, -26704, -26733, -26762, 
  -26791, -26820, -26848, -26877, -26906, -26935, -26963, -26992, 
  -27020, -27049, -27077, -27105, -27133, -27162, -27190, -27218, 
  -27246, -27273, -27301, -27329, -27357, -27384, -27412, -27440, 
  -27467, -27494, -27522, -27549, -27576, -27603, -27630, -27657, 
  -27684, -27711, -27738, -27765, -27791, -27818, -27844, -27871, 
  -27897, -27924, -27950, -27976, -28002, -28028, -28054, -28080, 
  -28106, -28132, -28158, -28183, -28209, -28234, -28260, -28285, 
  -28311, -28336, -28361, -28386, -28411, -28436, -28461, -28486, 
  -28511, -28536, -28560, -28585, -28610, -28634, -28658, -28683, 
  -28707, -28731, -28755, -28779, -28803, -28827, -28851, -28875, 
  -28899, -28922, -28946, -28970, -28993, -29016, -29040, -29063, 
  -29086, -29109, -29132, -29155, -29178, -29201, -29224, -29247, 
  -29269, -29292, -29314, -29337, -29359, -29381, -29404, -29426, 
  -29448, -29470, -29492, -29514, -29535, -29557, -29579, -29600, 
  -29622, -29643, -29665, -29686, -29707, -29729, -29750, -29771, 
  -29792, -29813, -29833, -29854, -29875, -29895, -29916, -29936, 
  -29957, -29977, -29997, -30018, -30038, -30058, -30078, -30098, 
  -30118, -30137, -30157, -30177, -30196, -30216, -30235, -30254, 
  -30274, -30293, -30312, -30331, -30350, -30369, -30388, -30407, 
  -30425, -30444, -30462, -30481, -30499, -30518, -30536, -30554, 
  -30572, -30590, -30608, -30626, -30644, -30662, -30680, -30697, 
  -30715, -30732, -30750, -30767, -30784, -30801, -30819, -30836, 
  -30853, -30869, -30886, -30903, -30920, -30936, -30953, -30969, 
  -30986, -31002, -31018, -31034, -31050, -31067, -31082, -31098, 
  -31114, -31130, -31146, -31161, -31177, -31192, -31207, -31223, 
  -31238, -31253, -31268, -31283, -31298, -31313, -31328, -31342, 
  -31357, -31372, -31386, -31400, -31415, -31429, -31443, -31457, 
  -31471, -31485, -31499, -31513, -31527, -31540, -31554, -31568, 
  -31581, -31594, -31608, -31621, -31634, -31647, -31660, -31673, 
  -31686, -31699, -31711, -31724, -31737, -31749, -31761, -31774, 
  -31786, -31798, -31810, -31822, -31834, -31846, -31858, -31870, 
  -31881, -31893, -31904, -31916, -31927, -31938, -31950, -31961, 
  -31972, -31983, -31994, -32005, -32015, -32026, -32037, -32047, 
  -32058, -32068, -32078, -32088, -32099, -32109, -32119, -32129, 
  -32138, -32148, -32158, -32167, -32177, -32186, -32196, -32205, 
  -32214, -32224, -32233, -32242, -32251, -32259, -32268, -32277, 
  -32286, -32294, -32303, -32311, -32319, -32328, -32336, -32344, 
  -32352, -32360, -32368, -32376, -32383, -32391, -32398, -32406, 
  -32413, -32421, -32428, -32435, -32442, -32449, -32456, -32463, 
  -32470, -32477, -32483, -32490, -32496, -32503, -32509, -32515, 
  -32522, -32528, -32534, -32540, -32546, -32551, -32557, -32563, 
  -32568, -32574, -32579, -32585, -32590, -32595, -32600, -32605, 
  -32610, -32615, -32620, -32625, -32629, -32634, -32638, -32643, 
  -32647, -32651, -32656, -32660, -32664, -32668, -32672, -32675, 
  -32679, -32683, -32686, -32690, -32693, -32697, -32700, -32703, 
  -32706, -32709, -32712, -32715, -32718, -32721, -32723, -32726, 
  -32729, -32731, -32733, -32736, -32738, -32740, -32742, -32744, 
  -32746, -32748, -32749, -32751, -32753, -32754, -32756, -32757, 
  -32758, -32759, -32760, -32761, -32762, -32763, -32764, -32765, 
  -32766, -32766, -32767, -32767, -32767, -32767, -32767, -32767, 
  
  /*-32767, -32767, -32767, -32767, -32767, -32767, -32767, -32766, 
  -32766, -32765, -32764, -32763, -32762, -32761, -32760, -32759, 
  -32758, -32757, -32756, -32754, -32753, -32751, -32749, -32748, 
  -32746, -32744, -32742, -32740, -32738, -32736, -32733, -32731, 
  -32729, -32726, -32723, -32721, -32718, -32715, -32712, -32709, 
  -32706, -32703, -32700, -32697, -32693, -32690, -32686, -32683, 
  -32679, -32675, -32672, -32668, -32664, -32660, -32656, -32651, 
  -32647, -32643, -32638, -32634, -32629, -32625, -32620, -32615, 
  -32610, -32605, -32600, -32595, -32590, -32585, -32579, -32574, 
  -32568, -32563, -32557, -32551, -32546, -32540, -32534, -32528, 
  -32522, -32515, -32509, -32503, -32496, -32490, -32483, -32477, 
  -32470, -32463, -32456, -32449, -32442, -32435, -32428, -32421, 
  -32413, -32406, -32398, -32391, -32383, -32376, -32368, -32360, 
  -32352, -32344, -32336, -32328, -32319, -32311, -32303, -32294, 
  -32286, -32277, -32268, -32259, -32251, -32242, -32233, -32224, 
  -32214, -32205, -32196, -32186, -32177, -32167, -32158, -32148, 
  -32138, -32129, -32119, -32109, -32099, -32088, -32078, -32068, 
  -32058, -32047, -32037, -32026, -32015, -32005, -31994, -31983, 
  -31972, -31961, -31950, -31938, -31927, -31916, -31904, -31893, 
  -31881, -31870, -31858, -31846, -31834, -31822, -31810, -31798, 
  -31786, -31774, -31761, -31749, -31737, -31724, -31711, -31699, 
  -31686, -31673, -31660, -31647, -31634, -31621, -31608, -31594, 
  -31581, -31568, -31554, -31540, -31527, -31513, -31499, -31485, 
  -31471, -31457, -31443, -31429, -31415, -31400, -31386, -31372, 
  -31357, -31342, -31328, -31313, -31298, -31283, -31268, -31253, 
  -31238, -31223, -31207, -31192, -31177, -31161, -31146, -31130, 
  -31114, -31098, -31082, -31067, -31050, -31034, -31018, -31002, 
  -30986, -30969, -30953, -30936, -30920, -30903, -30886, -30869, 
  -30853, -30836, -30819, -30801, -30784, -30767, -30750, -30732, 
  -30715, -30697, -30680, -30662, -30644, -30626, -30608, -30590, 
  -30572, -30554, -30536, -30518, -30499, -30481, -30462, -30444, 
  -30425, -30407, -30388, -30369, -30350, -30331, -30312, -30293, 
  -30274, -30254, -30235, -30216, -30196, -30177, -30157, -30137, 
  -30118, -30098, -30078, -30058, -30038, -30018, -29997, -29977, 
  -29957, -29936, -29916, -29895, -29875, -29854, -29833, -29813, 
  -29792, -29771, -29750, -29729, -29707, -29686, -29665, -29643, 
  -29622, -29600, -29579, -29557, -29535, -29514, -29492, -29470, 
  -29448, -29426, -29404, -29381, -29359, -29337, -29314, -29292, 
  -29269, -29247, -29224, -29201, -29178, -29155, -29132, -29109, 
  -29086, -29063, -29040, -29016, -28993, -28970, -28946, -28922, 
  -28899, -28875, -28851, -28827, -28803, -28779, -28755, -28731, 
  -28707, -28683, -28658, -28634, -28610, -28585, -28560, -28536, 
  -28511, -28486, -28461, -28436, -28411, -28386, -28361, -28336, 
  -28311, -28285, -28260, -28234, -28209, -28183, -28158, -28132, 
  -28106, -28080, -28054, -28028, -28002, -27976, -27950, -27924, 
  -27897, -27871, -27844, -27818, -27791, -27765, -27738, -27711, 
  -27684, -27657, -27630, -27603, -27576, -27549, -27522, -27494, 
  -27467, -27440, -27412, -27384, -27357, -27329, -27301, -27273, 
  -27246, -27218, -27190, -27162, -27133, -27105, -27077, -27049, 
  -27020, -26992, -26963, -26935, -26906, -26877, -26848, -26820, 
  -26791, -26762, -26733, -26704, -26674, -26645, -26616, -26586, 
  -26557, -26528, -26498, -26468, -26439, -26409, -26379, -26349, 
  -26320, -26290, -26259, -26229, -26199, -26169, -26139, -26108, 
  -26078, -26048, -26017, -25986, -25956, -25925, -25894, -25863, 
  -25833, -25802, -25771, -25739, -25708, -25677, -25646, -25615, 
  -25583, -25552, -25520, -25489, -25457, -25425, -25394, -25362, 
  -25330, -25298, -25266, -25234, -25202, -25170, -25138, -25105, 
  -25073, -25041, -25008, -24976, -24943, -24910, -24878, -24845, 
  -24812, -24779, -24746, -24713, -24680, -24647, -24614, -24581, 
  -24548, -24514, -24481, -24448, -24414, -24380, -24347, -24313, 
  -24279, -24246, -24212, -24178, -24144, -24110, -24076, -24042, 
  -24008, -23973, -23939, -23905, -23870, -23836, -23801, -23767, 
  -23732, -23697, -23663, -23628, -23593, -23558, -23523, -23488, 
  -23453, -23418, -23383, -23348, -23312, -23277, -23241, -23206, 
  -23170, -23135, -23099, -23064, -23028, -22992, -22956, -22920, 
  -22884, -22848, -22812, -22776, -22740, -22704, -22668, -22631, 
  -22595, -22558, -22522, -22485, -22449, -22412, -22375, -22339, 
  -22302, -22265, -22228, -22191, -22154, -22117, -22080, -22043, 
  -22006, -21968, -21931, -21894, -21856, -21819, -21781, -21744, 
  -21706, -21668, -21631, -21593, -21555, -21517, -21479, -21441, 
  -21403, -21365, -21327, -21289, -21251, -21212, -21174, -21136, 
  -21097, -21059, -21020, -20981, -20943, -20904, -20865, -20827, 
  -20788, -20749, -20710, -20671, -20632, -20593, -20554, -20515, 
  -20475, -20436, -20397, -20357, -20318, -20279, -20239, -20200, 
  -20160, -20120, -20081, -20041, -20001, -19961, -19921, -19881, 
  -19841, -19801, -19761, -19721, -19681, -19641, -19601, -19560, 
  -19520, -19479, -19439, -19399, -19358, -19317, -19277, -19236, 
  -19195, -19155, -19114, -19073, -19032, -18991, -18950, -18909, 
  -18868, -18827, -18786, -18745, -18703, -18662, -18621, -18579, 
  -18538, -18496, -18455, -18413, -18372, -18330, -18288, -18247, 
  -18205, -18163, -18121, -18079, -18037, -17995, -17953, -17911, 
  -17869, -17827, -17785, -17743, -17700, -17658, -17616, -17573, 
  -17531, -17488, -17446, -17403, -17361, -17318, -17275, -17233, 
  -17190, -17147, -17104, -17061, -17018, -16975, -16932, -16889, 
  -16846, -16803, -16760, -16717, -16673, -16630, -16587, -16543, 
  -16500, -16456, -16413, -16369, -16326, -16282, -16239, -16195, 
  -16151, -16108, -16064, -16020, -15976, -15932, -15888, -15844, 
  -15800, -15756, -15712, -15668, -15624, -15580, -15535, -15491, 
  -15447, -15402, -15358, -15314, -15269, -15225, -15180, -15136, 
  -15091, -15046, -15002, -14957, -14912, -14867, -14823, -14778, 
  -14733, -14688, -14643, -14598, -14553, -14508, -14463, -14418, 
  -14373, -14327, -14282, -14237, -14192, -14146, -14101, -14056, 
  -14010, -13965, -13919, -13874, -13828, -13783, -13737, -13691, 
  -13646, -13600, -13554, -13508, -13463, -13417, -13371, -13325, 
  -13279, -13233, -13187, -13141, -13095, -13049, -13003, -12957, 
  -12910, -12864, -12818, -12772, -12725, -12679, -12633, -12586, 
  -12540, -12493, -12447, -12400, -12354, -12307, -12261, -12214, 
  -12167, -12121, -12074, -12027, -11980, -11934, -11887, -11840, 
  -11793, -11746, -11699, -11652, -11605, -11558, -11511, -11464, 
  -11417, -11370, -11323, -11276, -11228, -11181, -11134, -11087, 
  -11039, -10992, -10945, -10897, -10850, -10802, -10755, -10707, 
  -10660, -10612, -10565, -10517, -10469, -10422, -10374, -10326, 
  -10279, -10231, -10183, -10135, -10088, -10040, -9992, -9944, 
  -9896, -9848, -9800, -9752, -9704, -9656, -9608, -9560, 
  -9512, -9464, -9416, -9368, -9319, -9271, -9223, -9175, 
  -9127, -9078, -9030, -8982, -8933, -8885, -8836, -8788, 
  -8740, -8691, -8643, -8594, -8546, -8497, -8449, -8400, 
  -8351, -8303, -8254, -8206, -8157, -8108, -8059, -8011, 
  -7962, -7913, -7864, -7816, -7767, -7718, -7669, -7620, 
  -7571, -7522, -7473, -7425, -7376, -7327, -7278, -7229, 
  -7180, -7130, -7081, -7032, -6983, -6934, -6885, -6836, 
  -6787, -6737, -6688, -6639, -6590, -6541, -6491, -6442, 
  -6393, -6343, -6294, -6245, -6195, -6146, -6097, -6047, 
  -5998, -5948, -5899, -5850, -5800, -5751, -5701, -5652, 
  -5602, -5553, -5503, -5453, -5404, -5354, -5305, -5255, 
  -5205, -5156, -5106, -5057, -5007, -4957, -4907, -4858, 
  -4808, -4758, -4709, -4659, -4609, -4559, -4510, -4460, 
  -4410, -4360, -4310, -4260, -4211, -4161, -4111, -4061, 
  -4011, -3961, -3911, -3861, -3812, -3762, -3712, -3662, 
  -3612, -3562, -3512, -3462, -3412, -3362, -3312, -3262, 
  -3212, -3162, -3112, -3062, -3012, -2962, -2912, -2861, 
  -2811, -2761, -2711, -2661, -2611, -2561, -2511, -2461, 
  -2411, -2360, -2310, -2260, -2210, -2160, -2110, -2060, 
  -2009, -1959, -1909, -1859, -1809, -1758, -1708, -1658, 
  -1608, -1558, -1507, -1457, -1407, -1357, -1307, -1256, 
  -1206, -1156, -1106, -1055, -1005, -955, -905, -854, 
  -804, -754, -704, -653, -603, -553, -503, -452, 
  -402, -352, -302, -251, -201, -151, -101, -50, */
};
 
/*
  FIX_MPY() - fixed-point multiplication & scaling.
  Substitute inline assembly for hardware-specific
  optimization suited to a particluar DSP processor.
  Scaling ensures that result remains 16-bit.
*/
inline int16_t FIX_MPY(int16_t a, int16_t b)
{   
    int32_t c = ((int32_t)a * (int32_t)b) >> (sizeof(a) * 8 - 2);

    b = c & 0x01;
    a = (c >> 1) + b;
 
    return a;
}
 
/*
  fix_fft() - perform forward/inverse fast Fourier transform.
  fr[n],fi[n] are real and imaginary arrays, both INPUT AND
  RESULT (in-place FFT), with 0 <= n < 2**m; set inverse to
  0 for forward transform (FFT), or 1 for iFFT.
*/
int16_t fix_fft(int16_t fr[], int16_t fi[], int m, int inverse)
{
  int16_t mr, nn, i, j, l, k, istep, n, scale, shift;
  int16_t qr, qi, tr, ti, wr, wi;
 
  int16_t max_val = (~((typeof(fr[0])) 0)) >> 2;
 
  n = 1 << m;
 
   /* max FFT size = N_WAVE */
  if (n > N_WAVE)
    return -1;

  mr = 0;
  nn = n - 1;
  scale = 0;
 
  /* decimation in time - re-order data */
  for (m=1; m<=nn; ++m) {
    l = n;
    do {
      l >>= 1;
    } while (mr+l > nn);
    mr = (mr & (l-1)) + l;
 
    if (mr <= m)
      continue;
    tr = fr[m];
    fr[m] = fr[mr];
    fr[mr] = tr;
    ti = fi[m];
    fi[m] = fi[mr];
    fi[mr] = ti;
  }
 
  l = 1;
  k = LOG2_N_WAVE-1;
  while (l < n) {
    if (inverse) {
      /* variable scaling, depending upon data */
      shift = 0;
      for (i=0; i<n; ++i) {
          j = fr[i];
          if (j < 0)
            j = -j;
          m = fi[i];
          if (m < 0)
            m = -m;
          if (j > max_val || m > max_val) {
            shift = 1;
            break;
          }
      }
      if (shift)
          ++scale;
    } else {
      /*
        fixed scaling, for proper normalization --
        there will be log2(n) passes, so this results
        in an overall factor of 1/n, distributed to
        maximize arithmetic accuracy.
      */
      shift = 1;
    }
    /*
      it may not be obvious, but the shift will be
      performed on each data point exactly once,
      during this pass.
    */
    istep = l << 1;
    for (m=0; m<l; ++m) {
      j = m << k;
      /* 0 <= j < N_WAVE/2 */
      wr = Sinewave[j+N_WAVE/4];
        
 
      wi = -Sinewave[j];
      if (inverse)
          wi = -wi;
      if (shift) {
          wr >>= 1;
          wi >>= 1;
      }
      for (i=m; i<n; i+=istep) {
          j = i + l;
          tr = FIX_MPY(wr,fr[j]) - FIX_MPY(wi,fi[j]);
          ti = FIX_MPY(wr,fi[j]) + FIX_MPY(wi,fr[j]);
          qr = fr[i];
          qi = fi[i];
          if (shift) {
            qr >>= 1;
            qi >>= 1;
          }
          fr[j] = qr - tr;
          fi[j] = qi - ti;
          fr[i] = qr + tr;
          fi[i] = qi + ti;
      }
    }
    --k;
    l = istep;
  }
  return scale;
}

// Blackman window weights for 2048 points.
static const int16_t blackman_window[N_WAVE / 2] = {
11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 
13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 
15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 
18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 
21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 
26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 
31, 31, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 37, 
37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 42, 43, 43, 44, 44, 
45, 45, 46, 46, 47, 47, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 
54, 54, 55, 55, 56, 57, 57, 58, 58, 59, 60, 60, 61, 62, 62, 63, 
63, 64, 65, 65, 66, 67, 68, 68, 69, 70, 70, 71, 72, 73, 73, 74, 
75, 75, 76, 77, 78, 79, 79, 80, 81, 82, 83, 83, 84, 85, 86, 87, 
87, 88, 89, 90, 91, 92, 93, 94, 94, 95, 96, 97, 98, 99, 100, 101, 
102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 
118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 135, 
136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 151, 152, 153, 154, 
156, 157, 158, 160, 161, 162, 164, 165, 167, 168, 169, 171, 172, 174, 175, 176, 
178, 179, 181, 182, 184, 185, 187, 188, 190, 191, 193, 194, 196, 198, 199, 201, 
202, 204, 206, 207, 209, 210, 212, 214, 215, 217, 219, 221, 222, 224, 226, 228, 
229, 231, 233, 235, 236, 238, 240, 242, 244, 246, 248, 249, 251, 253, 255, 257, 
259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 290, 
292, 294, 296, 298, 300, 302, 305, 307, 309, 311, 314, 316, 318, 320, 323, 325, 
327, 330, 332, 334, 337, 339, 342, 344, 346, 349, 351, 354, 356, 359, 361, 364, 
366, 369, 371, 374, 377, 379, 382, 385, 387, 390, 393, 395, 398, 401, 403, 406, 
409, 412, 415, 417, 420, 423, 426, 429, 432, 435, 437, 440, 443, 446, 449, 452, 
455, 458, 461, 464, 467, 471, 474, 477, 480, 483, 486, 489, 493, 496, 499, 502, 
506, 509, 512, 515, 519, 522, 526, 529, 532, 536, 539, 543, 546, 550, 553, 557, 
560, 564, 567, 571, 574, 578, 582, 585, 589, 593, 596, 600, 604, 608, 611, 615, 
619, 623, 627, 631, 635, 638, 642, 646, 650, 654, 658, 662, 666, 671, 675, 679, 
683, 687, 691, 695, 700, 704, 708, 712, 717, 721, 725, 729, 734, 738, 743, 747, 
752, 756, 760, 765, 769, 774, 779, 783, 788, 792, 797, 802, 806, 811, 816, 821, 
825, 830, 835, 840, 845, 850, 855, 859, 864, 869, 874, 879, 884, 890, 895, 900, 
905, 910, 915, 920, 926, 931, 936, 941, 947, 952, 957, 963, 968, 974, 979, 985, 
990, 996, 1001, 1007, 1012, 1018, 1023, 1029, 1035, 1041, 1046, 1052, 1058, 1064, 1069, 1075, 
1081, 1087, 1093, 1099, 1105, 1111, 1117, 1123, 1129, 1135, 1141, 1148, 1154, 1160, 1166, 1172, 
1179, 1185, 1191, 1198, 1204, 1210, 1217, 1223, 1230, 1236, 1243, 1250, 1256, 1263, 1269, 1276, 
1283, 1289, 1296, 1303, 1310, 1317, 1324, 1330, 1337, 1344, 1351, 1358, 1365, 1372, 1379, 1386, 
1394, 1401, 1408, 1415, 1422, 1430, 1437, 1444, 1452, 1459, 1467, 1474, 1481, 1489, 1496, 1504, 
1512, 1519, 1527, 1535, 1542, 1550, 1558, 1566, 1573, 1581, 1589, 1597, 1605, 1613, 1621, 1629, 
1637, 1645, 1653, 1661, 1669, 1678, 1686, 1694, 1702, 1711, 1719, 1728, 1736, 1744, 1753, 1761, 
1770, 1779, 1787, 1796, 1804, 1813, 1822, 1831, 1839, 1848, 1857, 1866, 1875, 1884, 1893, 1902, 
1911, 1920, 1929, 1938, 1947, 1957, 1966, 1975, 1984, 1994, 2003, 2012, 2022, 2031, 2041, 2050, 
2060, 2070, 2079, 2089, 2098, 2108, 2118, 2128, 2138, 2147, 2157, 2167, 2177, 2187, 2197, 2207, 
2217, 2228, 2238, 2248, 2258, 2268, 2279, 2289, 2299, 2310, 2320, 2331, 2341, 2352, 2362, 2373, 
2384, 2394, 2405, 2416, 2426, 2437, 2448, 2459, 2470, 2481, 2492, 2503, 2514, 2525, 2536, 2547, 
2559, 2570, 2581, 2592, 2604, 2615, 2627, 2638, 2649, 2661, 2673, 2684, 2696, 2707, 2719, 2731, 
2743, 2755, 2766, 2778, 2790, 2802, 2814, 2826, 2838, 2850, 2863, 2875, 2887, 2899, 2912, 2924, 
2936, 2949, 2961, 2974, 2986, 2999, 3011, 3024, 3037, 3049, 3062, 3075, 3088, 3101, 3113, 3126, 
3139, 3152, 3165, 3179, 3192, 3205, 3218, 3231, 3245, 3258, 3271, 3285, 3298, 3312, 3325, 3339, 
3352, 3366, 3380, 3393, 3407, 3421, 3435, 3448, 3462, 3476, 3490, 3504, 3518, 3533, 3547, 3561, 
3575, 3589, 3604, 3618, 3632, 3647, 3661, 3676, 3690, 3705, 3720, 3734, 3749, 3764, 3778, 3793, 
3808, 3823, 3838, 3853, 3868, 3883, 3898, 3913, 3928, 3944, 3959, 3974, 3990, 4005, 4020, 4036, 
4051, 4067, 4083, 4098, 4114, 4130, 4145, 4161, 4177, 4193, 4209, 4225, 4241, 4257, 4273, 4289, 
4305, 4321, 4338, 4354, 4370, 4387, 4403, 4419, 4436, 4453, 4469, 4486, 4502, 4519, 4536, 4553, 
4569, 4586, 4603, 4620, 4637, 4654, 4671, 4688, 4706, 4723, 4740, 4757, 4775, 4792, 4810, 4827, 
4845, 4862, 4880, 4897, 4915, 4933, 4950, 4968, 4986, 5004, 5022, 5040, 5058, 5076, 5094, 5112, 
5130, 5149, 5167, 5185, 5204, 5222, 5240, 5259, 5277, 5296, 5315, 5333, 5352, 5371, 5389, 5408, 
5427, 5446, 5465, 5484, 5503, 5522, 5541, 5560, 5580, 5599, 5618, 5637, 5657, 5676, 5696, 5715, 
5735, 5754, 5774, 5794, 5813, 5833, 5853, 5873, 5893, 5913, 5933, 5953, 5973, 5993, 6013, 6033, 
6053, 6074, 6094, 6114, 6135, 6155, 6176, 6196, 6217, 6237, 6258, 6279, 6299, 6320, 6341, 6362, 
6383, 6404, 6425, 6446, 6467, 6488, 6509, 6531, 6552, 6573, 6594, 6616, 6637, 6659, 6680, 6702, 
6723, 6745, 6767, 6789, 6810, 6832, 6854, 6876, 6898, 6920, 6942, 6964, 6986, 7008, 7030, 7053, 
7075, 7097, 7120, 7142, 7164, 7187, 7210, 7232, 7255, 7277, 7300, 7323, 7346, 7368, 7391, 7414, 

7437, 7460, 7483, 7506, 7530, 7553, 7576, 7599, 7622, 7646, 7669, 7693, 7716, 7740, 7763, 7787, 
7810, 7834, 7858, 7882, 7905, 7929, 7953, 7977, 8001, 8025, 8049, 8073, 8097, 8121, 8146, 8170, 
8194, 8219, 8243, 8267, 8292, 8316, 8341, 8365, 8390, 8415, 8439, 8464, 8489, 8514, 8539, 8564, 
8589, 8613, 8639, 8664, 8689, 8714, 8739, 8764, 8790, 8815, 8840, 8866, 8891, 8917, 8942, 8968, 
8993, 9019, 9045, 9070, 9096, 9122, 9148, 9173, 9199, 9225, 9251, 9277, 9303, 9330, 9356, 9382, 
9408, 9434, 9461, 9487, 9513, 9540, 9566, 9593, 9619, 9646, 9672, 9699, 9726, 9753, 9779, 9806, 
9833, 9860, 9887, 9914, 9941, 9968, 9995, 10022, 10049, 10076, 10103, 10131, 10158, 10185, 10213, 10240, 
10267, 10295, 10322, 10350, 10378, 10405, 10433, 10461, 10488, 10516, 10544, 10572, 10600, 10627, 10655, 10683, 
10711, 10739, 10768, 10796, 10824, 10852, 10880, 10909, 10937, 10965, 10994, 11022, 11050, 11079, 11107, 11136, 
11165, 11193, 11222, 11250, 11279, 11308, 11337, 11366, 11394, 11423, 11452, 11481, 11510, 11539, 11568, 11597, 
11626, 11656, 11685, 11714, 11743, 11773, 11802, 11831, 11861, 11890, 11919, 11949, 11978, 12008, 12038, 12067, 
12097, 12126, 12156, 12186, 12216, 12245, 12275, 12305, 12335, 12365, 12395, 12425, 12455, 12485, 12515, 12545, 
12575, 12605, 12635, 12666, 12696, 12726, 12757, 12787, 12817, 12848, 12878, 12908, 12939, 12969, 13000, 13031, 
13061, 13092, 13122, 13153, 13184, 13215, 13245, 13276, 13307, 13338, 13369, 13399, 13430, 13461, 13492, 13523, 
13554, 13585, 13616, 13648, 13679, 13710, 13741, 13772, 13803, 13835, 13866, 13897, 13929, 13960, 13991, 14023, 
14054, 14086, 14117, 14149, 14180, 14212, 14243, 14275, 14307, 14338, 14370, 14402, 14433, 14465, 14497, 14529, 
14560, 14592, 14624, 14656, 14688, 14720, 14752, 14784, 14816, 14848, 14880, 14912, 14944, 14976, 15008, 15040, 
15072, 15104, 15136, 15169, 15201, 15233, 15265, 15298, 15330, 15362, 15395, 15427, 15459, 15492, 15524, 15557, 
15589, 15621, 15654, 15686, 15719, 15751, 15784, 15817, 15849, 15882, 15914, 15947, 15980, 16012, 16045, 16078, 
16110, 16143, 16176, 16209, 16241, 16274, 16307, 16340, 16373, 16405, 16438, 16471, 16504, 16537, 16570, 16603, 
16636, 16669, 16702, 16735, 16768, 16801, 16834, 16867, 16900, 16933, 16966, 16999, 17032, 17065, 17098, 17131, 
17164, 17198, 17231, 17264, 17297, 17330, 17363, 17397, 17430, 17463, 17496, 17530, 17563, 17596, 17629, 17663, 
17696, 17729, 17762, 17796, 17829, 17862, 17896, 17929, 17962, 17996, 18029, 18062, 18096, 18129, 18162, 18196, 
18229, 18263, 18296, 18329, 18363, 18396, 18430, 18463, 18496, 18530, 18563, 18597, 18630, 18664, 18697, 18730, 
18764, 18797, 18831, 18864, 18898, 18931, 18965, 18998, 19031, 19065, 19098, 19132, 19165, 19199, 19232, 19266, 
19299, 19333, 19366, 19400, 19433, 19466, 19500, 19533, 19567, 19600, 19634, 19667, 19701, 19734, 19768, 19801, 
19834, 19868, 19901, 19935, 19968, 20002, 20035, 20068, 20102, 20135, 20169, 20202, 20235, 20269, 20302, 20335, 
20369, 20402, 20435, 20469, 20502, 20535, 20569, 20602, 20635, 20669, 20702, 20735, 20769, 20802, 20835, 20868, 
20902, 20935, 20968, 21001, 21034, 21068, 21101, 21134, 21167, 21200, 21233, 21266, 21300, 21333, 21366, 21399, 
21432, 21465, 21498, 21531, 21564, 21597, 21630, 21663, 21696, 21729, 21762, 21795, 21828, 21861, 21894, 21926, 
21959, 21992, 22025, 22058, 22090, 22123, 22156, 22189, 22221, 22254, 22287, 22320, 22352, 22385, 22417, 22450, 
22483, 22515, 22548, 22580, 22613, 22645, 22678, 22710, 22743, 22775, 22807, 22840, 22872, 22904, 22937, 22969, 
23001, 23034, 23066, 23098, 23130, 23162, 23194, 23227, 23259, 23291, 23323, 23355, 23387, 23419, 23451, 23483, 
23514, 23546, 23578, 23610, 23642, 23674, 23705, 23737, 23769, 23800, 23832, 23864, 23895, 23927, 23958, 23990, 
24021, 24053, 24084, 24116, 24147, 24178, 24210, 24241, 24272, 24303, 24335, 24366, 24397, 24428, 24459, 24490, 
24521, 24552, 24583, 24614, 24645, 24676, 24707, 24737, 24768, 24799, 24830, 24860, 24891, 24921, 24952, 24983, 
25013, 25044, 25074, 25104, 25135, 25165, 25195, 25226, 25256, 25286, 25316, 25346, 25376, 25406, 25436, 25466, 
25496, 25526, 25556, 25586, 25616, 25645, 25675, 25705, 25734, 25764, 25794, 25823, 25853, 25882, 25911, 25941, 
25970, 25999, 26029, 26058, 26087, 26116, 26145, 26174, 26203, 26232, 26261, 26290, 26319, 26348, 26376, 26405, 
26434, 26462, 26491, 26519, 26548, 26576, 26605, 26633, 26661, 26690, 26718, 26746, 26774, 26802, 26830, 26858, 
26886, 26914, 26942, 26970, 26998, 27025, 27053, 27080, 27108, 27136, 27163, 27190, 27218, 27245, 27272, 27300, 
27327, 27354, 27381, 27408, 27435, 27462, 27489, 27516, 27543, 27569, 27596, 27623, 27649, 27676, 27702, 27729, 
27755, 27781, 27808, 27834, 27860, 27886, 27912, 27938, 27964, 27990, 28016, 28042, 28068, 28093, 28119, 28144, 
28170, 28196, 28221, 28246, 28272, 28297, 28322, 28347, 28372, 28397, 28422, 28447, 28472, 28497, 28522, 28546, 
28571, 28596, 28620, 28645, 28669, 28693, 28718, 28742, 28766, 28790, 28814, 28838, 28862, 28886, 28910, 28933, 
28957, 28981, 29004, 29028, 29051, 29075, 29098, 29121, 29145, 29168, 29191, 29214, 29237, 29260, 29283, 29305, 
29328, 29351, 29373, 29396, 29418, 29441, 29463, 29485, 29508, 29530, 29552, 29574, 29596, 29618, 29639, 29661, 
29683, 29705, 29726, 29748, 29769, 29790, 29812, 29833, 29854, 29875, 29896, 29917, 29938, 29959, 29980, 30000, 
30021, 30042, 30062, 30083, 30103, 30123, 30143, 30164, 30184, 30204, 30224, 30244, 30263, 30283, 30303, 30322, 
30342, 30361, 30381, 30400, 30419, 30439, 30458, 30477, 30496, 30515, 30534, 30552, 30571, 30590, 30608, 30627, 
30645, 30663, 30682, 30700, 30718, 30736, 30754, 30772, 30790, 30807, 30825, 30843, 30860, 30878, 30895, 30912, 
30930, 30947, 30964, 30981, 30998, 31015, 31032, 31048, 31065, 31082, 31098, 31114, 31131, 31147, 31163, 31179, 
31195, 31211, 31227, 31243, 31259, 31275, 31290, 31306, 31321, 31336, 31352, 31367, 31382, 31397, 31412, 31427, 
31442, 31457, 31471, 31486, 31500, 31515, 31529, 31543, 31558, 31572, 31586, 31600, 31614, 31627, 31641, 31655, 
31668, 31682, 31695, 31708, 31722, 31735, 31748, 31761, 31774, 31787, 31800, 31812, 31825, 31837, 31850, 31862, 
31874, 31887, 31899, 31911, 31923, 31935, 31946, 31958, 31970, 31981, 31993, 32004, 32016, 32027, 32038, 32049, 
32060, 32071, 32082, 32092, 32103, 32114, 32124, 32135, 32145, 32155, 32165, 32175, 32185, 32195, 32205, 32215, 
32225, 32234, 32244, 32253, 32262, 32272, 32281, 32290, 32299, 32308, 32317, 32325, 32334, 32343, 32351, 32359, 
32368, 32376, 32384, 32392, 32400, 32408, 32416, 32424, 32431, 32439, 32446, 32454, 32461, 32468, 32475, 32482, 
32489, 32496, 32503, 32510, 32516, 32523, 32529, 32536, 32542, 32548, 32554, 32560, 32566, 32572, 32578, 32584, 
32589, 32595, 32600, 32606, 32611, 32616, 32621, 32626, 32631, 32636, 32641, 32645, 32650, 32654, 32659, 32663, 
32667, 32671, 32675, 32679, 32683, 32687, 32691, 32694, 32698, 32701, 32705, 32708, 32711, 32714, 32717, 32720, 
32723, 32726, 32728, 32731, 32733, 32736, 32738, 32740, 32742, 32744, 32746, 32748, 32750, 32752, 32753, 32755, 
32756, 32758, 32759, 32760, 32761, 32762, 32763, 32764, 32765, 32765, 32766, 32766, 32767, 32767, 32767, 32767, 

/*
-32768, 32767, 32767, 32767, 32767, 32766, 32766, 32765, 32765, 32764, 32763, 32762, 32761, 32760, 32759, 32758, 
32756, 32755, 32753, 32752, 32750, 32748, 32746, 32744, 32742, 32740, 32738, 32736, 32733, 32731, 32728, 32726, 
32723, 32720, 32717, 32714, 32711, 32708, 32705, 32701, 32698, 32694, 32691, 32687, 32683, 32679, 32675, 32671, 
32667, 32663, 32659, 32654, 32650, 32645, 32641, 32636, 32631, 32626, 32621, 32616, 32611, 32606, 32600, 32595, 
32589, 32584, 32578, 32572, 32566, 32560, 32554, 32548, 32542, 32536, 32529, 32523, 32516, 32510, 32503, 32496, 
32489, 32482, 32475, 32468, 32461, 32454, 32446, 32439, 32431, 32424, 32416, 32408, 32400, 32392, 32384, 32376, 
32368, 32359, 32351, 32343, 32334, 32325, 32317, 32308, 32299, 32290, 32281, 32272, 32262, 32253, 32244, 32234, 
32225, 32215, 32205, 32195, 32185, 32175, 32165, 32155, 32145, 32135, 32124, 32114, 32103, 32092, 32082, 32071, 
32060, 32049, 32038, 32027, 32016, 32004, 31993, 31981, 31970, 31958, 31946, 31935, 31923, 31911, 31899, 31887, 
31874, 31862, 31850, 31837, 31825, 31812, 31800, 31787, 31774, 31761, 31748, 31735, 31722, 31708, 31695, 31682, 
31668, 31655, 31641, 31627, 31614, 31600, 31586, 31572, 31558, 31543, 31529, 31515, 31500, 31486, 31471, 31457, 
31442, 31427, 31412, 31397, 31382, 31367, 31352, 31336, 31321, 31306, 31290, 31275, 31259, 31243, 31227, 31211, 
31195, 31179, 31163, 31147, 31131, 31114, 31098, 31082, 31065, 31048, 31032, 31015, 30998, 30981, 30964, 30947, 
30930, 30912, 30895, 30878, 30860, 30843, 30825, 30807, 30790, 30772, 30754, 30736, 30718, 30700, 30682, 30663, 
30645, 30627, 30608, 30590, 30571, 30552, 30534, 30515, 30496, 30477, 30458, 30439, 30419, 30400, 30381, 30361, 
30342, 30322, 30303, 30283, 30263, 30244, 30224, 30204, 30184, 30164, 30143, 30123, 30103, 30083, 30062, 30042, 
30021, 30000, 29980, 29959, 29938, 29917, 29896, 29875, 29854, 29833, 29812, 29790, 29769, 29748, 29726, 29705, 
29683, 29661, 29639, 29618, 29596, 29574, 29552, 29530, 29508, 29485, 29463, 29441, 29418, 29396, 29373, 29351, 
29328, 29305, 29283, 29260, 29237, 29214, 29191, 29168, 29145, 29121, 29098, 29075, 29051, 29028, 29004, 28981, 
28957, 28933, 28910, 28886, 28862, 28838, 28814, 28790, 28766, 28742, 28718, 28693, 28669, 28645, 28620, 28596, 
28571, 28546, 28522, 28497, 28472, 28447, 28422, 28397, 28372, 28347, 28322, 28297, 28272, 28246, 28221, 28196, 
28170, 28144, 28119, 28093, 28068, 28042, 28016, 27990, 27964, 27938, 27912, 27886, 27860, 27834, 27808, 27781, 
27755, 27729, 27702, 27676, 27649, 27623, 27596, 27569, 27543, 27516, 27489, 27462, 27435, 27408, 27381, 27354, 
27327, 27300, 27272, 27245, 27218, 27190, 27163, 27136, 27108, 27080, 27053, 27025, 26998, 26970, 26942, 26914, 
26886, 26858, 26830, 26802, 26774, 26746, 26718, 26690, 26661, 26633, 26605, 26576, 26548, 26519, 26491, 26462, 
26434, 26405, 26376, 26348, 26319, 26290, 26261, 26232, 26203, 26174, 26145, 26116, 26087, 26058, 26029, 25999, 
25970, 25941, 25911, 25882, 25853, 25823, 25794, 25764, 25734, 25705, 25675, 25645, 25616, 25586, 25556, 25526, 
25496, 25466, 25436, 25406, 25376, 25346, 25316, 25286, 25256, 25226, 25195, 25165, 25135, 25104, 25074, 25044, 
25013, 24983, 24952, 24921, 24891, 24860, 24830, 24799, 24768, 24737, 24707, 24676, 24645, 24614, 24583, 24552, 
24521, 24490, 24459, 24428, 24397, 24366, 24335, 24303, 24272, 24241, 24210, 24178, 24147, 24116, 24084, 24053, 
24021, 23990, 23958, 23927, 23895, 23864, 23832, 23800, 23769, 23737, 23705, 23674, 23642, 23610, 23578, 23546, 
23514, 23483, 23451, 23419, 23387, 23355, 23323, 23291, 23259, 23227, 23194, 23162, 23130, 23098, 23066, 23034, 
23001, 22969, 22937, 22904, 22872, 22840, 22807, 22775, 22743, 22710, 22678, 22645, 22613, 22580, 22548, 22515, 
22483, 22450, 22417, 22385, 22352, 22320, 22287, 22254, 22221, 22189, 22156, 22123, 22090, 22058, 22025, 21992, 
21959, 21926, 21894, 21861, 21828, 21795, 21762, 21729, 21696, 21663, 21630, 21597, 21564, 21531, 21498, 21465, 
21432, 21399, 21366, 21333, 21300, 21266, 21233, 21200, 21167, 21134, 21101, 21068, 21034, 21001, 20968, 20935, 
20902, 20868, 20835, 20802, 20769, 20735, 20702, 20669, 20635, 20602, 20569, 20535, 20502, 20469, 20435, 20402, 
20369, 20335, 20302, 20269, 20235, 20202, 20169, 20135, 20102, 20068, 20035, 20002, 19968, 19935, 19901, 19868, 
19834, 19801, 19768, 19734, 19701, 19667, 19634, 19600, 19567, 19533, 19500, 19466, 19433, 19400, 19366, 19333, 
19299, 19266, 19232, 19199, 19165, 19132, 19098, 19065, 19031, 18998, 18965, 18931, 18898, 18864, 18831, 18797, 
18764, 18730, 18697, 18664, 18630, 18597, 18563, 18530, 18496, 18463, 18430, 18396, 18363, 18329, 18296, 18263, 
18229, 18196, 18162, 18129, 18096, 18062, 18029, 17996, 17962, 17929, 17896, 17862, 17829, 17796, 17762, 17729, 
17696, 17663, 17629, 17596, 17563, 17530, 17496, 17463, 17430, 17397, 17363, 17330, 17297, 17264, 17231, 17198, 
17164, 17131, 17098, 17065, 17032, 16999, 16966, 16933, 16900, 16867, 16834, 16801, 16768, 16735, 16702, 16669, 
16636, 16603, 16570, 16537, 16504, 16471, 16438, 16405, 16373, 16340, 16307, 16274, 16241, 16209, 16176, 16143, 
16110, 16078, 16045, 16012, 15980, 15947, 15914, 15882, 15849, 15817, 15784, 15751, 15719, 15686, 15654, 15621, 
15589, 15557, 15524, 15492, 15459, 15427, 15395, 15362, 15330, 15298, 15265, 15233, 15201, 15169, 15136, 15104, 
15072, 15040, 15008, 14976, 14944, 14912, 14880, 14848, 14816, 14784, 14752, 14720, 14688, 14656, 14624, 14592, 
14560, 14529, 14497, 14465, 14433, 14402, 14370, 14338, 14307, 14275, 14243, 14212, 14180, 14149, 14117, 14086, 
14054, 14023, 13991, 13960, 13929, 13897, 13866, 13835, 13803, 13772, 13741, 13710, 13679, 13648, 13616, 13585, 
13554, 13523, 13492, 13461, 13430, 13399, 13369, 13338, 13307, 13276, 13245, 13215, 13184, 13153, 13122, 13092, 
13061, 13031, 13000, 12969, 12939, 12908, 12878, 12848, 12817, 12787, 12757, 12726, 12696, 12666, 12635, 12605, 
12575, 12545, 12515, 12485, 12455, 12425, 12395, 12365, 12335, 12305, 12275, 12245, 12216, 12186, 12156, 12126, 
12097, 12067, 12038, 12008, 11978, 11949, 11919, 11890, 11861, 11831, 11802, 11773, 11743, 11714, 11685, 11656, 
11626, 11597, 11568, 11539, 11510, 11481, 11452, 11423, 11394, 11366, 11337, 11308, 11279, 11250, 11222, 11193, 
11165, 11136, 11107, 11079, 11050, 11022, 10994, 10965, 10937, 10909, 10880, 10852, 10824, 10796, 10768, 10739, 
10711, 10683, 10655, 10627, 10600, 10572, 10544, 10516, 10488, 10461, 10433, 10405, 10378, 10350, 10322, 10295, 
10267, 10240, 10213, 10185, 10158, 10131, 10103, 10076, 10049, 10022, 9995, 9968, 9941, 9914, 9887, 9860, 
9833, 9806, 9779, 9753, 9726, 9699, 9672, 9646, 9619, 9593, 9566, 9540, 9513, 9487, 9461, 9434, 
9408, 9382, 9356, 9330, 9303, 9277, 9251, 9225, 9199, 9173, 9148, 9122, 9096, 9070, 9045, 9019, 
8993, 8968, 8942, 8917, 8891, 8866, 8840, 8815, 8790, 8764, 8739, 8714, 8689, 8664, 8639, 8613, 
8589, 8564, 8539, 8514, 8489, 8464, 8439, 8415, 8390, 8365, 8341, 8316, 8292, 8267, 8243, 8219, 
8194, 8170, 8146, 8121, 8097, 8073, 8049, 8025, 8001, 7977, 7953, 7929, 7905, 7882, 7858, 7834, 
7810, 7787, 7763, 7740, 7716, 7693, 7669, 7646, 7622, 7599, 7576, 7553, 7530, 7506, 7483, 7460, 

7437, 7414, 7391, 7368, 7346, 7323, 7300, 7277, 7255, 7232, 7210, 7187, 7164, 7142, 7120, 7097, 
7075, 7053, 7030, 7008, 6986, 6964, 6942, 6920, 6898, 6876, 6854, 6832, 6810, 6789, 6767, 6745, 
6723, 6702, 6680, 6659, 6637, 6616, 6594, 6573, 6552, 6531, 6509, 6488, 6467, 6446, 6425, 6404, 
6383, 6362, 6341, 6320, 6299, 6279, 6258, 6237, 6217, 6196, 6176, 6155, 6135, 6114, 6094, 6074, 
6053, 6033, 6013, 5993, 5973, 5953, 5933, 5913, 5893, 5873, 5853, 5833, 5813, 5794, 5774, 5754, 
5735, 5715, 5696, 5676, 5657, 5637, 5618, 5599, 5580, 5560, 5541, 5522, 5503, 5484, 5465, 5446, 
5427, 5408, 5389, 5371, 5352, 5333, 5315, 5296, 5277, 5259, 5240, 5222, 5204, 5185, 5167, 5149, 
5130, 5112, 5094, 5076, 5058, 5040, 5022, 5004, 4986, 4968, 4950, 4933, 4915, 4897, 4880, 4862, 
4845, 4827, 4810, 4792, 4775, 4757, 4740, 4723, 4706, 4688, 4671, 4654, 4637, 4620, 4603, 4586, 
4569, 4553, 4536, 4519, 4502, 4486, 4469, 4453, 4436, 4419, 4403, 4387, 4370, 4354, 4338, 4321, 
4305, 4289, 4273, 4257, 4241, 4225, 4209, 4193, 4177, 4161, 4145, 4130, 4114, 4098, 4083, 4067, 
4051, 4036, 4020, 4005, 3990, 3974, 3959, 3944, 3928, 3913, 3898, 3883, 3868, 3853, 3838, 3823, 
3808, 3793, 3778, 3764, 3749, 3734, 3720, 3705, 3690, 3676, 3661, 3647, 3632, 3618, 3604, 3589, 
3575, 3561, 3547, 3533, 3518, 3504, 3490, 3476, 3462, 3448, 3435, 3421, 3407, 3393, 3380, 3366, 
3352, 3339, 3325, 3312, 3298, 3285, 3271, 3258, 3245, 3231, 3218, 3205, 3192, 3179, 3165, 3152, 
3139, 3126, 3113, 3101, 3088, 3075, 3062, 3049, 3037, 3024, 3011, 2999, 2986, 2974, 2961, 2949, 
2936, 2924, 2912, 2899, 2887, 2875, 2863, 2850, 2838, 2826, 2814, 2802, 2790, 2778, 2766, 2755, 
2743, 2731, 2719, 2707, 2696, 2684, 2673, 2661, 2649, 2638, 2627, 2615, 2604, 2592, 2581, 2570, 
2559, 2547, 2536, 2525, 2514, 2503, 2492, 2481, 2470, 2459, 2448, 2437, 2426, 2416, 2405, 2394, 
2384, 2373, 2362, 2352, 2341, 2331, 2320, 2310, 2299, 2289, 2279, 2268, 2258, 2248, 2238, 2228, 
2217, 2207, 2197, 2187, 2177, 2167, 2157, 2147, 2138, 2128, 2118, 2108, 2098, 2089, 2079, 2070, 
2060, 2050, 2041, 2031, 2022, 2012, 2003, 1994, 1984, 1975, 1966, 1957, 1947, 1938, 1929, 1920, 
1911, 1902, 1893, 1884, 1875, 1866, 1857, 1848, 1839, 1831, 1822, 1813, 1804, 1796, 1787, 1779, 
1770, 1761, 1753, 1744, 1736, 1728, 1719, 1711, 1702, 1694, 1686, 1678, 1669, 1661, 1653, 1645, 
1637, 1629, 1621, 1613, 1605, 1597, 1589, 1581, 1573, 1566, 1558, 1550, 1542, 1535, 1527, 1519, 
1512, 1504, 1496, 1489, 1481, 1474, 1467, 1459, 1452, 1444, 1437, 1430, 1422, 1415, 1408, 1401, 
1394, 1386, 1379, 1372, 1365, 1358, 1351, 1344, 1337, 1330, 1324, 1317, 1310, 1303, 1296, 1289, 
1283, 1276, 1269, 1263, 1256, 1250, 1243, 1236, 1230, 1223, 1217, 1210, 1204, 1198, 1191, 1185, 
1179, 1172, 1166, 1160, 1154, 1148, 1141, 1135, 1129, 1123, 1117, 1111, 1105, 1099, 1093, 1087, 
1081, 1075, 1069, 1064, 1058, 1052, 1046, 1041, 1035, 1029, 1023, 1018, 1012, 1007, 1001, 996, 
990, 985, 979, 974, 968, 963, 957, 952, 947, 941, 936, 931, 926, 920, 915, 910, 
905, 900, 895, 890, 884, 879, 874, 869, 864, 859, 855, 850, 845, 840, 835, 830, 
825, 821, 816, 811, 806, 802, 797, 792, 788, 783, 779, 774, 769, 765, 760, 756, 
752, 747, 743, 738, 734, 729, 725, 721, 717, 712, 708, 704, 700, 695, 691, 687, 
683, 679, 675, 671, 666, 662, 658, 654, 650, 646, 642, 638, 635, 631, 627, 623, 
619, 615, 611, 608, 604, 600, 596, 593, 589, 585, 582, 578, 574, 571, 567, 564, 
560, 557, 553, 550, 546, 543, 539, 536, 532, 529, 526, 522, 519, 515, 512, 509, 
506, 502, 499, 496, 493, 489, 486, 483, 480, 477, 474, 471, 467, 464, 461, 458, 
455, 452, 449, 446, 443, 440, 437, 435, 432, 429, 426, 423, 420, 417, 415, 412, 
409, 406, 403, 401, 398, 395, 393, 390, 387, 385, 382, 379, 377, 374, 371, 369, 
366, 364, 361, 359, 356, 354, 351, 349, 346, 344, 342, 339, 337, 334, 332, 330, 
327, 325, 323, 320, 318, 316, 314, 311, 309, 307, 305, 302, 300, 298, 296, 294, 
292, 290, 287, 285, 283, 281, 279, 277, 275, 273, 271, 269, 267, 265, 263, 261, 
259, 257, 255, 253, 251, 249, 248, 246, 244, 242, 240, 238, 236, 235, 233, 231, 
229, 228, 226, 224, 222, 221, 219, 217, 215, 214, 212, 210, 209, 207, 206, 204, 
202, 201, 199, 198, 196, 194, 193, 191, 190, 188, 187, 185, 184, 182, 181, 179, 
178, 176, 175, 174, 172, 171, 169, 168, 167, 165, 164, 162, 161, 160, 158, 157, 
156, 154, 153, 152, 151, 149, 148, 147, 145, 144, 143, 142, 141, 139, 138, 137, 
136, 135, 133, 132, 131, 130, 129, 128, 127, 125, 124, 123, 122, 121, 120, 119, 
118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 
102, 101, 100, 99, 98, 97, 96, 95, 94, 94, 93, 92, 91, 90, 89, 88, 
87, 87, 86, 85, 84, 83, 83, 82, 81, 80, 79, 79, 78, 77, 76, 75, 
75, 74, 73, 73, 72, 71, 70, 70, 69, 68, 68, 67, 66, 65, 65, 64, 
63, 63, 62, 62, 61, 60, 60, 59, 58, 58, 57, 57, 56, 55, 55, 54, 
54, 53, 52, 52, 51, 51, 50, 50, 49, 49, 48, 47, 47, 46, 46, 45, 
45, 44, 44, 43, 43, 42, 42, 42, 41, 41, 40, 40, 39, 39, 38, 38, 
37, 37, 37, 36, 36, 35, 35, 34, 34, 34, 33, 33, 33, 32, 32, 31, 
31, 31, 30, 30, 30, 29, 29, 29, 28, 28, 28, 27, 27, 27, 26, 26, 
26, 25, 25, 25, 24, 24, 24, 24, 23, 23, 23, 22, 22, 22, 22, 21, 
21, 21, 21, 20, 20, 20, 20, 19, 19, 19, 19, 19, 18, 18, 18, 18, 
18, 17, 17, 17, 17, 17, 16, 16, 16, 16, 16, 16, 15, 15, 15, 15, 
15, 15, 15, 14, 14, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 
13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 
 */
};

static int apply_window(int16_t *data, int m, const int16_t *window)
{
  if (m < 1 || m > LOG2_N_WAVE) {
    return -1;
  }

  int half = 1 << (m - 1);
  int w_step = 1 << (LOG2_N_WAVE - m);

  int size = half;
  const int16_t *w_ptr = &window[w_step - 1];

  while (size-- > 0) {
    *data = FIX_MPY(*data, *w_ptr);
    data++;
    w_ptr += w_step;
  }

  size = half;
  w_ptr = &window[N_WAVE / 2 - 1];

  while (size-- > 0) {
    *data = FIX_MPY(*data, *w_ptr);
    data++;
    w_ptr -= w_step;
  }

  return 0;
}

// функция окна блэкмана
int apply_blackman_window(int16_t *data, int m) {
  return apply_window(data, m, blackman_window);
}

void ADC_Handler() {
  int adc_isr = ADC->ADC_ISR;
  
  if (adc_isr & ADC_ISR_ENDRX) {
    // заполнен очередной буфер, передаём контоллеру доступа следующий буфер

    int next_buf_index = (i_buf_index + 2) % BUFFER_COUNT;
    
    if (next_buf_index != o_buf_index) {
      // В кольцевом буфере есть место под новый "next" блок данных.
      // Продвигаем указатель.
      i_buf_index = (i_buf_index + 1) % BUFFER_COUNT;
    }
    else {
      // Переполнение кольцевого буфера.
      // "next" блок данных будет отброшен и заполнен заново.
      // i_buf_index не меняется.
      next_buf_index = (i_buf_index + 1) % BUFFER_COUNT;
    }
    
    ADC->ADC_RNPR = (uint32_t) buffer[next_buf_index];
    ADC->ADC_RNCR = BUFFER_SIZE;
  }
}

int16_t *get_adc_buffer() {
  while (o_buf_index == i_buf_index);
  
  return buffer[o_buf_index];
}

// процедуа полученеия свободного буфера
void free_adc_buffer() {
  if (o_buf_index != i_buf_index) {
    o_buf_index = (o_buf_index + 1) % BUFFER_COUNT;
  }
}

// функция извлечения квадратного корня из числа с фиксированной точкой
int16_t sqrt_i(int16_t x) {
 int16_t a, b;
 int32_t xdp = ((int32_t) x) << 16;

 a = 0;
 b = INT16_MAX;

  while (b - a > 1) {
    int16_t m = (a + b) / 2;
    int32_t sq = (((int32_t) m) * m) << 1;

    if (sq > xdp) {
      b = m;
    }
    else {
      a = m;
    }
  }

  if (abs(((((int32_t) a) * a) << 1) - xdp) < abs(((((int32_t) b) * b) << 1) - xdp)) {
    return a;
  }
  else {
    return b;
  }
}

/* функция расчёта значения x. Возвращает: 
  min_value, когда x < min_value;
  max_value, когда x > max_value
  в потивном случае x
*/
inline int limit(int x, int min_value, int max_value) {
  if (x < min_value) {
    return min_value;
  }
  else if (x > max_value) {
    return max_value;
  }
  
  return x;
}

// поиск индекса максимума в массиве x[size]
size_t max_array_element(const int16_t *x, size_t size) {
  int16_t max_value = x[0];
  size_t max_index = 0;
  
  for (size_t i = 0; i < size; i++) {
    if (x[i] > max_value) {
      max_value = x[i];
      max_index = i;
    }
  }
  
  return max_index;
}

void word_to_bytes(uint16_t val, byte& high, byte& low) {
  high = (val >> 8) & 0xff;
  low = val & 0xff;
}

void write_word(uint16_t value) {
  byte high, low;
  word_to_bytes(value, high, low);
  Serial.write(high);
  Serial.write(low);  
}

void write_data(const band_data_t* data, int data_size) {
  for (int i = 0; i < data_size; i++) {
    write_word(data[i].band_count);
    write_word(data[i].level);
  }
}

void write_packet(const band_data_t* data, int data_size, /*int low_freq_count,*/ uint16_t max_level, uint16_t peak_index, uint16_t log_base, uint16_t sample_freq, uint16_t n_wave) {
  write_word(0xffff); // флаг начала пакета
  write_word(max_level); // передача значения максимальной амплитуды
  write_word(peak_index); // передача индекса с максимальной амплитудой
  write_word(log_base); // передача значения логарифма для отображения нужного числа полос
  write_word(sample_freq); // передача частоты, соответствующей одной полосе
  write_word(n_wave); //
  //write_word(low_freq_count);
  write_word(data_size);  // передача размеров структуры амплитуд и кол-ва выборок по полосе
  write_data(data, data_size); // передача структуры с апмплитудой и кол-вом выборок, размером data_size
  write_word(0x0000); // флаг конца пакета
}

void reverse(band_data_t* data, int size) {
  for (int i = 0, j = size - 1; i < j; i++, j--) {
    band_data_t tmp = data[i];
    data[i] = data[j];
    data[j] = tmp;
  }
}

void setup() {
  Serial.begin(115200); // Устанавливает скорость порта на 115200 Бод
  Serial.setTimeout(10000);  
  
  i_buf_index = o_buf_index = 0; // начальные установки АЦП
  
  adc_init(ADC, SystemCoreClock, ADC_FREQ_MIN, ADC_STARTUP_NORM); // инициализация АЦП ADC_FREQ_MIN = 1000000 (1 MHz)
  adc_configure_timing(ADC, 0, ADC_SETTLING_TIME_3, 1); // 23 periods ADC_FREQ per 1 conversion (43478.26 Hz)
  adc_configure_trigger(ADC, ADC_TRIG_SW, 1);
  adc_disable_interrupt(ADC, 0xFFFFFFFF);
  adc_disable_all_channel(ADC); // запрет АЦП на всех каналах
  
  adc_enable_channel(ADC, ADC_CHANNEL_7); // разрешение АЦП на 7 канале МК (А0)
  
  adc_enable_interrupt(ADC, ADC_IER_ENDRX); // разрешаем прерывание по готовности буфера прямого доступа в память
  
  // инициализиуем прямой доступ в память
  ADC->ADC_RPR = (uint32_t) buffer[0]; 
  ADC->ADC_RCR = BUFFER_SIZE;
  ADC->ADC_RNPR = (uint32_t) buffer[1];
  ADC->ADC_RNCR = BUFFER_SIZE;
  ADC->ADC_PTCR = ADC_PTCR_RXTEN; // разрешаем прямой доступ в память
  
  NVIC_EnableIRQ(ADC_IRQn); // разрешение прерывания от АЦП в контроллере прерываний
  
  adc_start(ADC); // запуск АЦП
  
  // калибровка  
  // заполняем и чистим буфер информации - заряжаем конденсатор АЦП для последующего вычисления постоянной составляюей
  for(int i = 0; i < CALIBRATION_DUMMY_LOOPS; i++) {
    get_adc_buffer();
    free_adc_buffer();
  }
  
  // вычисляем постоянную составляющую сигнала
  int32_t sum = 0;
  
  for(int i = 0; i < CALIBRATION_WORK_LOOPS; i++) {
    int16_t *data = get_adc_buffer();
    for(int j = 0; j < BUFFER_SIZE; j++) { 
      sum += data[j];
    }
    
    free_adc_buffer();
  }
  
  dc_level = sum / (CALIBRATION_WORK_LOOPS * BUFFER_SIZE);
  
  pinMode(OVERLOAD_LED, OUTPUT);
  pinMode(POWER_LED, OUTPUT);
  pinMode(DAC_LED, OUTPUT);
  digitalWrite(OVERLOAD_LED, 0);
  digitalWrite(POWER_LED, 1);
  digitalWrite(DAC_LED, 1);
}
void loop() {
  int16_t *data = get_adc_buffer(); // получаем данные преобазования от АЦП в массив data
  
  // счётчики уровней сигнала
  int16_t level_counters[NUM_LEVEL_COUNTERS];
  
  // устанавливаем все счётчики в ноль
  memset(level_counters, 0, sizeof(level_counters));
  
  for (int i = 0; i < BUFFER_SIZE; i++) {  
    data[i] = ((data[i] - dc_level) << 4);
    int16_t level_counter_index = data[i] / ((UINT16_MAX + 1) / NUM_LEVEL_COUNTERS) + NUM_LEVEL_COUNTERS / 2;
    level_counters[level_counter_index]++;    
  }
  
  int min_level_counter_index;
  int max_level_counter_index;
  
  for (min_level_counter_index = 0; min_level_counter_index < NUM_LEVEL_COUNTERS && level_counters[min_level_counter_index] == 0; min_level_counter_index++)
    ;  
  
  for (max_level_counter_index = NUM_LEVEL_COUNTERS - 1; max_level_counter_index > min_level_counter_index && level_counters[max_level_counter_index] == 0; max_level_counter_index--)
    ;
  
  int is_overload = 0;
  
  if (max_level_counter_index - min_level_counter_index > MIN_OVERLOAD_DETECTION_LEVEL) {
    int16_t level_counters_max = 0;
  
    for (int i = 0; i < 4; i++) {
      int max_index = max_array_element(level_counters, NUM_LEVEL_COUNTERS);
      level_counters_max += level_counters[max_index];
      level_counters[max_index] = 0;
    }
    
    if (BUFFER_SIZE / level_counters_max < OVERLOAD_DETECTION_THRESHOLD) {
      is_overload = 1;
    }
  }
  
  //Перегрузка      
  digitalWrite(OVERLOAD_LED, is_overload);

#ifdef APPLY_WINDOW  
  apply_blackman_window(data, LOG2_N_WAVE); // накладываем окно Блэкмана
#endif

  for (int i = 0; i < N_WAVE; i++) {
    im[i] = 0;
  }

  fix_fft(data, im, LOG2_N_WAVE, 0); // выполняем преобразование Фурье
  
  for (int i = 1; i < N_WAVE / 2; i++) {
    data[i] = FIX_MPY(data[i], data[i]) + FIX_MPY(im[i], im[i]);
  }
  
  int16_t peak_index = 0, peak_value = 1;
  
  for (int i = 1; i < N_WAVE / 2; i++) {
    if (data[i] > peak_value) {
      peak_index = i;
      peak_value = data[i];
    }
  }
  
  band_data_t out[N_WAVE];
  int data_index = N_WAVE / 2 - 1;
  int out_index = 0;
  int16_t data_size = N_WAVE / 2 - 1;
  
  while (data_index > 0) {
    int16_t count = FIX_MPY(data_size, OUTPUT_LOG_BASE_FIX);
    
    if (count == 0) {
      count = 1;
    }
    
    out[out_index].band_count = count;
    
    int16_t next_data_size = data_size - count;
    int16_t sum = 0;
    
    while (data_index > 0 && count > 0) {
       sum += data[data_index--];
       count--;
    }
    
    out[out_index++].level = sqrt_i(sum);
    
    data_size = next_data_size; 
  }
  
  reverse(out, out_index);
  
  write_packet(out, out_index, INT16_MAX / 10, peak_index, OUTPUT_LOG_BASE_FIX, SAMPLE_FREQ, N_WAVE);
  
  free_adc_buffer();  

  process_command();
}
